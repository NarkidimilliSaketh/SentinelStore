`code.txt`

```

```

`docker-compose.yml`

```yaml
version: '3.8'

networks:
  sentinelnet:
    driver: bridge

volumes:
  p2p_storage_0:
  p2p_storage_1:
  p2p_storage_2:

services:
  metadata_service:
    build: ./v2/metadata_service
    container_name: metadata_service
    ports:
      - "8000:8000"
    networks:
      - sentinelnet
    environment:
      - P2P_NODE_URLS=http://p2p_node_0:8001,http://p2p_node_1:8001,http://p2p_node_2:8001
    depends_on:
      p2p_node_0:
        condition: service_healthy
      p2p_node_1:
        condition: service_healthy
      p2p_node_2:
        condition: service_healthy

  # --- The AI Guardian Service is commented out until we build it ---
  # ai_guardian:
  #   build: ./v2/ai_guardian
  #   ...

  p2p_node_0:
    build: ./v2/p2p_network
    container_name: p2p_node_0
    ports:
      - "8001:8001"
      - "8468:8468/udp"
    environment:
      - API_PORT=8001
      - NODE_PORT=8468
      - OWN_PUBLIC_URL=http://localhost:8001
      - OWN_INTERNAL_URL=http://p2p_node_0:8001
    volumes:
      - p2p_storage_0:/storage
    networks:
      - sentinelnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  p2p_node_1:
    build: ./v2/p2p_network
    container_name: p2p_node_1
    ports:
      - "8002:8001"
      - "8469:8468/udp"
    environment:
      - API_PORT=8001
      - NODE_PORT=8468
      - BOOTSTRAP_IP=p2p_node_0
      - BOOTSTRAP_PORT=8468
      - OWN_PUBLIC_URL=http://localhost:8002
      - OWN_INTERNAL_URL=http://p2p_node_1:8001
    volumes:
      - p2p_storage_1:/storage
    networks:
      - sentinelnet
    depends_on:
      p2p_node_0:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  p2p_node_2:
    build: ./v2/p2p_network
    container_name: p2p_node_2
    ports:
      - "8003:8001"
      - "8470:8468/udp"
    environment:
      - API_PORT=8001
      - NODE_PORT=8468
      - BOOTSTRAP_IP=p2p_node_0
      - BOOTSTRAP_PORT=8468
      - OWN_PUBLIC_URL=http://localhost:8003
      - OWN_INTERNAL_URL=http://p2p_node_2:8001
    volumes:
      - p2p_storage_2:/storage
    networks:
      - sentinelnet
    depends_on:
      p2p_node_0:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build: ./v2/frontend
    container_name: frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_P2P_NODE_URLS=http://localhost:8001,http://localhost:8002,http://localhost:8003
    # --- START OF CORRECTION ---
    # The 'depends_on' block for the frontend was incorrectly indented.
    # This is the correct YAML structure for multiple dependencies with conditions.
    depends_on:
      metadata_service:
        condition: service_started # metadata_service doesn't have a healthcheck, so we wait for it to start
      p2p_node_0:
        condition: service_healthy
      p2p_node_1:
        condition: service_healthy
      p2p_node_2:
        condition: service_healthy
    # --- END OF CORRECTION ---
```

`o.txt`

```

```

`package-lock.json`

```json
{
  "name": "SentinelStore",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "secrets.js": "^0.1.8",
        "shamirs-secret-sharing": "^2.0.1"
      }
    },
    "node_modules/secrets.js": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/secrets.js/-/secrets.js-0.1.8.tgz",
      "integrity": "sha512-ZID3VTwPtjJT9ClzS8DqlZIgxYMfTuwBZaXWbk9UYcgSD3Y+jCNrjWVvPNOtqpAL1Yin/GIhMIO6OhXsyBAkFA=="
    },
    "node_modules/shamirs-secret-sharing": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/shamirs-secret-sharing/-/shamirs-secret-sharing-2.0.1.tgz",
      "integrity": "sha512-gB2iE9Wb7BXfO+ExUU+i7/fdjOK7h4+Mtp9ZGRjmdGSeUq3czN+f/gX2KsKJdebXwG09D3SCRH0aqHmEuR2P6A==",
      "license": "MIT"
    }
  }
}

```

`package.json`

```json
{
  "dependencies": {
    "secrets.js": "^0.1.8",
    "shamirs-secret-sharing": "^2.0.1"
  }
}

```

`v2/frontend/Dockerfile`

```
# --- Stage 1: Build the React application ---
# Use a specific, stable version of Node.js on Alpine Linux for a smaller image
FROM node:18-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock, etc.) first
# This leverages Docker's layer caching. If these files don't change,
# Docker won't re-run 'npm install' on subsequent builds.
COPY package*.json ./

# Install all project dependencies
RUN npm install

# Copy the rest of the application source code
COPY . .

# Build the application for production.
# This command runs 'tsc' and 'vite build', creating an optimized build
# in the /app/dist folder.
RUN npm run build


# --- Stage 2: Serve the application using a lightweight Nginx server ---
# Use the official, stable Nginx image based on Alpine Linux
FROM nginx:stable-alpine

# Copy the built static files from the 'builder' stage to the default Nginx html directory
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy your custom Nginx configuration file.
# This is crucial for handling client-side routing in a Single-Page Application (SPA).
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80, which is the default port Nginx listens on inside the container
EXPOSE 80

# The default Nginx command starts the server in the foreground, which is correct for Docker.
# We specify it here for clarity.
CMD ["nginx", "-g", "daemon off;"]
```

`v2/frontend/eslint.config.js`

```javascript
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])

```

`v2/frontend/index.html`

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

```

`v2/frontend/package-lock.json`

```json
{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.0.0",
      "dependencies": {
        "@noble/hashes": "^1.8.0",
        "jwt-decode": "^4.0.0",
        "libsodium-wrappers": "^0.7.15",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-icons": "^5.5.0",
        "react-router-dom": "^7.7.1",
        "recharts": "^3.1.0",
        "secrets-js": "^0.9.2",
        "shamirs-secret-sharing": "^2.0.1",
        "tweetnacl": "^1.0.3"
      },
      "devDependencies": {
        "@eslint/js": "^9.30.1",
        "@types/jwt-decode": "^2.2.1",
        "@types/libsodium-wrappers": "^0.7.14",
        "@types/node": "^24.1.0",
        "@types/react": "^19.1.8",
        "@types/react-dom": "^19.1.6",
        "@vitejs/plugin-react": "^4.6.0",
        "eslint": "^9.30.1",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.20",
        "globals": "^16.3.0",
        "typescript": "~5.8.3",
        "typescript-eslint": "^8.35.1",
        "vite": "^7.0.4"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.8.tgz",
      "integrity": "sha512-urAvrUedIqEiFR3FYSLTWQgLu5tb+m0qZw0NBEasUeo6wuqatkMDaRT+1uABiGXEu5vqgPd7FGE1BhsAIy9QVA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.8.tgz",
      "integrity": "sha512-RONsAvGCz5oWyePVnLdZY/HHwA++nxYWIX1atInlaW6SEkwq6XkP3+cb825EUcRs5Vss/lGh/2YxAb5xqc07Uw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.8.tgz",
      "integrity": "sha512-OD3p7LYzWpLhZEyATcTSJ67qB5D+20vbtr6vHlHWSQYhKtzUYrETuWThmzFpZtFsBIxRvhO07+UgVA9m0i/O1w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.8.tgz",
      "integrity": "sha512-yJAVPklM5+4+9dTeKwHOaA+LQkmrKFX96BM0A/2zQrbS6ENCmxc4OVoBs5dPkCCak2roAD+jKCdnmOqKszPkjA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.8.tgz",
      "integrity": "sha512-Jw0mxgIaYX6R8ODrdkLLPwBqHTtYHJSmzzd+QeytSugzQ0Vg4c5rDky5VgkoowbZQahCbsv1rT1KW72MPIkevw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.8.tgz",
      "integrity": "sha512-Vh2gLxxHnuoQ+GjPNvDSDRpoBCUzY4Pu0kBqMBDlK4fuWbKgGtmDIeEC081xi26PPjn+1tct+Bh8FjyLlw1Zlg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.8.tgz",
      "integrity": "sha512-YPJ7hDQ9DnNe5vxOm6jaie9QsTwcKedPvizTVlqWG9GBSq+BuyWEDazlGaDTC5NGU4QJd666V0yqCBL2oWKPfA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.8.tgz",
      "integrity": "sha512-MmaEXxQRdXNFsRN/KcIimLnSJrk2r5H8v+WVafRWz5xdSVmWLoITZQXcgehI2ZE6gioE6HirAEToM/RvFBeuhw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.8.tgz",
      "integrity": "sha512-FuzEP9BixzZohl1kLf76KEVOsxtIBFwCaLupVuk4eFVnOZfU+Wsn+x5Ryam7nILV2pkq2TqQM9EZPsOBuMC+kg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.8.tgz",
      "integrity": "sha512-WIgg00ARWv/uYLU7lsuDK00d/hHSfES5BzdWAdAig1ioV5kaFNrtK8EqGcUBJhYqotlUByUKz5Qo6u8tt7iD/w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.8.tgz",
      "integrity": "sha512-A1D9YzRX1i+1AJZuFFUMP1E9fMaYY+GnSQil9Tlw05utlE86EKTUA7RjwHDkEitmLYiFsRd9HwKBPEftNdBfjg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.8.tgz",
      "integrity": "sha512-O7k1J/dwHkY1RMVvglFHl1HzutGEFFZ3kNiDMSOyUrB7WcoHGf96Sh+64nTRT26l3GMbCW01Ekh/ThKM5iI7hQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.8.tgz",
      "integrity": "sha512-uv+dqfRazte3BzfMp8PAQXmdGHQt2oC/y2ovwpTteqrMx2lwaksiFZ/bdkXJC19ttTvNXBuWH53zy/aTj1FgGw==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.8.tgz",
      "integrity": "sha512-GyG0KcMi1GBavP5JgAkkstMGyMholMDybAf8wF5A70CALlDM2p/f7YFE7H92eDeH/VBtFJA5MT4nRPDGg4JuzQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.8.tgz",
      "integrity": "sha512-rAqDYFv3yzMrq7GIcen3XP7TUEG/4LK86LUPMIz6RT8A6pRIDn0sDcvjudVZBiiTcZCY9y2SgYX2lgK3AF+1eg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.8.tgz",
      "integrity": "sha512-Xutvh6VjlbcHpsIIbwY8GVRbwoviWT19tFhgdA7DlenLGC/mbc3lBoVb7jxj9Z+eyGqvcnSyIltYUrkKzWqSvg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.8.tgz",
      "integrity": "sha512-ASFQhgY4ElXh3nDcOMTkQero4b1lgubskNlhIfJrsH5OKZXDpUAKBlNS0Kx81jwOBp+HCeZqmoJuihTv57/jvQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.8.tgz",
      "integrity": "sha512-d1KfruIeohqAi6SA+gENMuObDbEjn22olAR7egqnkCD9DGBG0wsEARotkLgXDu6c4ncgWTZJtN5vcgxzWRMzcw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.8.tgz",
      "integrity": "sha512-nVDCkrvx2ua+XQNyfrujIG38+YGyuy2Ru9kKVNyh5jAys6n+l44tTtToqHjino2My8VAY6Lw9H7RI73XFi66Cg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.8.tgz",
      "integrity": "sha512-j8HgrDuSJFAujkivSMSfPQSAa5Fxbvk4rgNAS5i3K+r8s1X0p1uOO2Hl2xNsGFppOeHOLAVgYwDVlmxhq5h+SQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.8.tgz",
      "integrity": "sha512-1h8MUAwa0VhNCDp6Af0HToI2TJFAn1uqT9Al6DJVzdIBAd21m/G0Yfc77KDM3uF3T/YaOgQq3qTJHPbTOInaIQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.8.tgz",
      "integrity": "sha512-r2nVa5SIK9tSWd0kJd9HCffnDHKchTGikb//9c7HX+r+wHYCpQrSgxhlY6KWV1nFo1l4KFbsMlHk+L6fekLsUg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.8.tgz",
      "integrity": "sha512-zUlaP2S12YhQ2UzUfcCuMDHQFJyKABkAjvO5YSndMiIkMimPmxA+BYSBikWgsRpvyxuRnow4nS5NPnf9fpv41w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.8.tgz",
      "integrity": "sha512-YEGFFWESlPva8hGL+zvj2z/SaK+pH0SwOM0Nc/d+rVnW7GSTFlLBGzZkuSU9kFIGIo8q9X3ucpZhu8PDN5A2sQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.8.tgz",
      "integrity": "sha512-hiGgGC6KZ5LZz58OL/+qVVoZiuZlUYlYHNAmczOm7bs2oE1XriPFi5ZHHrS8ACpV5EjySrnoCKmcbQMN+ojnHg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.8.tgz",
      "integrity": "sha512-cn3Yr7+OaaZq1c+2pe+8yxC8E144SReCQjN6/2ynubzYjvyqZjTXfQJpAcQpsdJq3My7XADANiYGHoFC69pLQw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.32.0.tgz",
      "integrity": "sha512-BBpRFZK3eX6uMLKz8WxFOBIFFcGFJ/g8XuwjTHCqHROSIsopI+ddn/d5Cfh36+7+e5edVS8dbSHnBNhrLEX0zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.4.tgz",
      "integrity": "sha512-Ul5l+lHEcw3L5+k8POx6r74mxEYKG5kOb6Xpy2gCRW6zweT6TEhAf8vhxGgjhqrd/VO/Dirhsb+1hNpD1ue9hw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@noble/hashes": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.8.0.tgz",
      "integrity": "sha512-jCs9ldd7NwzpgXDIf6P3+NrHh9/sD6CQdxHyjQI+h/6rDNo88ypBxxz45UDuZHz9r3tNz7N/VInSVoVdtXEI4A==",
      "license": "MIT",
      "engines": {
        "node": "^14.21.3 || >=16"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@reduxjs/toolkit": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.8.2.tgz",
      "integrity": "sha512-MYlOhQ0sLdw4ud48FoC5w0dH9VfWQjtCjreKwYTT3l+r427qYC5Y8PihNutepr8XrNaBUDQo9khWUwQxZaqt5A==",
      "license": "MIT",
      "dependencies": {
        "@standard-schema/spec": "^1.0.0",
        "@standard-schema/utils": "^0.3.0",
        "immer": "^10.0.3",
        "redux": "^5.0.1",
        "redux-thunk": "^3.1.0",
        "reselect": "^5.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17.0.0 || ^18 || ^19",
        "react-redux": "^7.2.1 || ^8.1.3 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-redux": {
          "optional": true
        }
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.46.2.tgz",
      "integrity": "sha512-Zj3Hl6sN34xJtMv7Anwb5Gu01yujyE/cLBDB2gnHTAHaWS1Z38L7kuSG+oAh0giZMqG060f/YBStXtMH6FvPMA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.46.2.tgz",
      "integrity": "sha512-nTeCWY83kN64oQ5MGz3CgtPx8NSOhC5lWtsjTs+8JAJNLcP3QbLCtDDgUKQc/Ro/frpMq4SHUaHN6AMltcEoLQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.46.2.tgz",
      "integrity": "sha512-HV7bW2Fb/F5KPdM/9bApunQh68YVDU8sO8BvcW9OngQVN3HHHkw99wFupuUJfGR9pYLLAjcAOA6iO+evsbBaPQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.46.2.tgz",
      "integrity": "sha512-SSj8TlYV5nJixSsm/y3QXfhspSiLYP11zpfwp6G/YDXctf3Xkdnk4woJIF5VQe0of2OjzTt8EsxnJDCdHd2xMA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.46.2.tgz",
      "integrity": "sha512-ZyrsG4TIT9xnOlLsSSi9w/X29tCbK1yegE49RYm3tu3wF1L/B6LVMqnEWyDB26d9Ecx9zrmXCiPmIabVuLmNSg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.46.2.tgz",
      "integrity": "sha512-pCgHFoOECwVCJ5GFq8+gR8SBKnMO+xe5UEqbemxBpCKYQddRQMgomv1104RnLSg7nNvgKy05sLsY51+OVRyiVw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.46.2.tgz",
      "integrity": "sha512-EtP8aquZ0xQg0ETFcxUbU71MZlHaw9MChwrQzatiE8U/bvi5uv/oChExXC4mWhjiqK7azGJBqU0tt5H123SzVA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.46.2.tgz",
      "integrity": "sha512-qO7F7U3u1nfxYRPM8HqFtLd+raev2K137dsV08q/LRKRLEc7RsiDWihUnrINdsWQxPR9jqZ8DIIZ1zJJAm5PjQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.46.2.tgz",
      "integrity": "sha512-3dRaqLfcOXYsfvw5xMrxAk9Lb1f395gkoBYzSFcc/scgRFptRXL9DOaDpMiehf9CO8ZDRJW2z45b6fpU5nwjng==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.46.2.tgz",
      "integrity": "sha512-fhHFTutA7SM+IrR6lIfiHskxmpmPTJUXpWIsBXpeEwNgZzZZSg/q4i6FU4J8qOGyJ0TR+wXBwx/L7Ho9z0+uDg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.46.2.tgz",
      "integrity": "sha512-i7wfGFXu8x4+FRqPymzjD+Hyav8l95UIZ773j7J7zRYc3Xsxy2wIn4x+llpunexXe6laaO72iEjeeGyUFmjKeA==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.46.2.tgz",
      "integrity": "sha512-B/l0dFcHVUnqcGZWKcWBSV2PF01YUt0Rvlurci5P+neqY/yMKchGU8ullZvIv5e8Y1C6wOn+U03mrDylP5q9Yw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.46.2.tgz",
      "integrity": "sha512-32k4ENb5ygtkMwPMucAb8MtV8olkPT03oiTxJbgkJa7lJ7dZMr0GCFJlyvy+K8iq7F/iuOr41ZdUHaOiqyR3iQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.46.2.tgz",
      "integrity": "sha512-t5B2loThlFEauloaQkZg9gxV05BYeITLvLkWOkRXogP4qHXLkWSbSHKM9S6H1schf/0YGP/qNKtiISlxvfmmZw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.46.2.tgz",
      "integrity": "sha512-YKjekwTEKgbB7n17gmODSmJVUIvj8CX7q5442/CK80L8nqOUbMtf8b01QkG3jOqyr1rotrAnW6B/qiHwfcuWQA==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.46.2.tgz",
      "integrity": "sha512-Jj5a9RUoe5ra+MEyERkDKLwTXVu6s3aACP51nkfnK9wJTraCC8IMe3snOfALkrjTYd2G1ViE1hICj0fZ7ALBPA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.46.2.tgz",
      "integrity": "sha512-7kX69DIrBeD7yNp4A5b81izs8BqoZkCIaxQaOpumcJ1S/kmqNFjPhDu1LHeVXv0SexfHQv5cqHsxLOjETuqDuA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.46.2.tgz",
      "integrity": "sha512-wiJWMIpeaak/jsbaq2HMh/rzZxHVW1rU6coyeNNpMwk5isiPjSTx0a4YLSlYDwBH/WBvLz+EtsNqQScZTLJy3g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.46.2.tgz",
      "integrity": "sha512-gBgaUDESVzMgWZhcyjfs9QFK16D8K6QZpwAaVNJxYDLHWayOta4ZMjGm/vsAEy3hvlS2GosVFlBlP9/Wb85DqQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.46.2.tgz",
      "integrity": "sha512-CvUo2ixeIQGtF6WvuB87XWqPQkoFAFqW+HUo/WzHwuHDvIwZCtjdWXoYCcr06iKGydiqTclC4jU/TNObC/xKZg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@standard-schema/spec": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
      "integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
      "license": "MIT"
    },
    "node_modules/@standard-schema/utils": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/utils/-/utils-0.3.0.tgz",
      "integrity": "sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==",
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/jwt-decode": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@types/jwt-decode/-/jwt-decode-2.2.1.tgz",
      "integrity": "sha512-aWw2YTtAdT7CskFyxEX2K21/zSDStuf/ikI3yBqmwpwJF0pS+/IX5DWv+1UFffZIbruP6cnT9/LAJV1gFwAT1A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/libsodium-wrappers": {
      "version": "0.7.14",
      "resolved": "https://registry.npmjs.org/@types/libsodium-wrappers/-/libsodium-wrappers-0.7.14.tgz",
      "integrity": "sha512-5Kv68fXuXK0iDuUir1WPGw2R9fOZUlYlSAa0ztMcL0s0BfIDTqg9GXz8K30VJpPP3sxWhbolnQma2x+/TfkzDQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.1.0",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.1.0.tgz",
      "integrity": "sha512-ut5FthK5moxFKH2T1CUOC6ctR67rQRvvHdFLCD2Ql6KXmMuCrjsSsRI9UsLCm9M18BMwClv4pn327UvB7eeO1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.8.0"
      }
    },
    "node_modules/@types/react": {
      "version": "19.1.9",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.9.tgz",
      "integrity": "sha512-WmdoynAX8Stew/36uTSVMcLJJ1KRh6L3IZRx1PZ7qJtBqT3dYTgyDTx8H1qoRghErydW7xw9mSJ3wS//tCRpFA==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.7.tgz",
      "integrity": "sha512-i5ZzwYpqjmrKenzkoLM2Ibzt6mAsM7pxB6BCIouEVVmgiqaMj1TjaK7hnA36hbW5aZv20kx7Lw6hWzPWg0Rurw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@types/use-sync-external-store": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@types/use-sync-external-store/-/use-sync-external-store-0.0.6.tgz",
      "integrity": "sha512-zFDAD+tlpf2r4asuHEj0XH6pY6i0g5NeAHPn+15wk3BV6JA69eERFXC1gyGThDkVa1zCyKr5jox1+2LbV/AMLg==",
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.38.0.tgz",
      "integrity": "sha512-CPoznzpuAnIOl4nhj4tRr4gIPj5AfKgkiJmGQDaq+fQnRJTYlcBjbX3wbciGmpoPf8DREufuPRe1tNMZnGdanA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.38.0",
        "@typescript-eslint/type-utils": "8.38.0",
        "@typescript-eslint/utils": "8.38.0",
        "@typescript-eslint/visitor-keys": "8.38.0",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.38.0",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.38.0.tgz",
      "integrity": "sha512-Zhy8HCvBUEfBECzIl1PKqF4p11+d0aUJS1GeUiuqK9WmOug8YCmC4h4bjyBvMyAMI9sbRczmrYL5lKg/YMbrcQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.38.0",
        "@typescript-eslint/types": "8.38.0",
        "@typescript-eslint/typescript-estree": "8.38.0",
        "@typescript-eslint/visitor-keys": "8.38.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.38.0.tgz",
      "integrity": "sha512-dbK7Jvqcb8c9QfH01YB6pORpqX1mn5gDZc9n63Ak/+jD67oWXn3Gs0M6vddAN+eDXBCS5EmNWzbSxsn9SzFWWg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.38.0",
        "@typescript-eslint/types": "^8.38.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.38.0.tgz",
      "integrity": "sha512-WJw3AVlFFcdT9Ri1xs/lg8LwDqgekWXWhH3iAF+1ZM+QPd7oxQ6jvtW/JPwzAScxitILUIFs0/AnQ/UWHzbATQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.38.0",
        "@typescript-eslint/visitor-keys": "8.38.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.38.0.tgz",
      "integrity": "sha512-Lum9RtSE3EroKk/bYns+sPOodqb2Fv50XOl/gMviMKNvanETUuUcC9ObRbzrJ4VSd2JalPqgSAavwrPiPvnAiQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.38.0.tgz",
      "integrity": "sha512-c7jAvGEZVf0ao2z+nnz8BUaHZD09Agbh+DY7qvBQqLiz8uJzRgVPj5YvOh8I8uEiH8oIUGIfHzMwUcGVco/SJg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.38.0",
        "@typescript-eslint/typescript-estree": "8.38.0",
        "@typescript-eslint/utils": "8.38.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.38.0.tgz",
      "integrity": "sha512-wzkUfX3plUqij4YwWaJyqhiPE5UCRVlFpKn1oCRn2O1bJ592XxWJj8ROQ3JD5MYXLORW84063z3tZTb/cs4Tyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.38.0.tgz",
      "integrity": "sha512-fooELKcAKzxux6fA6pxOflpNS0jc+nOQEEOipXFNjSlBS6fqrJOVY/whSn70SScHrcJ2LDsxWrneFoWYSVfqhQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.38.0",
        "@typescript-eslint/tsconfig-utils": "8.38.0",
        "@typescript-eslint/types": "8.38.0",
        "@typescript-eslint/visitor-keys": "8.38.0",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.38.0.tgz",
      "integrity": "sha512-hHcMA86Hgt+ijJlrD8fX0j1j8w4C92zue/8LOPAFioIno+W0+L7KqE8QZKCcPGc/92Vs9x36w/4MPTJhqXdyvg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.38.0",
        "@typescript-eslint/types": "8.38.0",
        "@typescript-eslint/typescript-estree": "8.38.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.38.0.tgz",
      "integrity": "sha512-pWrTcoFNWuwHlA9CvlfSsGWs14JxfN1TH25zM5L7o0pRLhsoZkDnTsXfQRJBEWJoV5DL0jf+Z+sxiud+K0mq1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.38.0",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001731",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001731.tgz",
      "integrity": "sha512-lDdp2/wrOmTRWuoB5DpfNkC0rJDU8DqRa6nYL6HK6sytw70QMopt/NIc/9SM7ylItlBWfACXk0tEn37UWM/+mg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.192",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.192.tgz",
      "integrity": "sha512-rP8Ez0w7UNw/9j5eSXCe10o1g/8B1P5SM90PCCMVkIRQn2R0LEHWz4Eh9RnxkniuDe1W0cTSOB3MLlkTGDcuCg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-toolkit": {
      "version": "1.39.8",
      "resolved": "https://registry.npmjs.org/es-toolkit/-/es-toolkit-1.39.8.tgz",
      "integrity": "sha512-A8QO9TfF+rltS8BXpdu8OS+rpGgEdnRhqIVxO/ZmNvnXBYgOdSsxukT55ELyP94gZIntWJ+Li9QRrT2u1Kitpg==",
      "license": "MIT",
      "workspaces": [
        "docs",
        "benchmarks"
      ]
    },
    "node_modules/esbuild": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.8.tgz",
      "integrity": "sha512-vVC0USHGtMi8+R4Kz8rt6JhEWLxsv9Rnu/lGYbPR8u47B+DCBksq9JarW0zOO7bs37hyOK1l2/oqtbciutL5+Q==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.8",
        "@esbuild/android-arm": "0.25.8",
        "@esbuild/android-arm64": "0.25.8",
        "@esbuild/android-x64": "0.25.8",
        "@esbuild/darwin-arm64": "0.25.8",
        "@esbuild/darwin-x64": "0.25.8",
        "@esbuild/freebsd-arm64": "0.25.8",
        "@esbuild/freebsd-x64": "0.25.8",
        "@esbuild/linux-arm": "0.25.8",
        "@esbuild/linux-arm64": "0.25.8",
        "@esbuild/linux-ia32": "0.25.8",
        "@esbuild/linux-loong64": "0.25.8",
        "@esbuild/linux-mips64el": "0.25.8",
        "@esbuild/linux-ppc64": "0.25.8",
        "@esbuild/linux-riscv64": "0.25.8",
        "@esbuild/linux-s390x": "0.25.8",
        "@esbuild/linux-x64": "0.25.8",
        "@esbuild/netbsd-arm64": "0.25.8",
        "@esbuild/netbsd-x64": "0.25.8",
        "@esbuild/openbsd-arm64": "0.25.8",
        "@esbuild/openbsd-x64": "0.25.8",
        "@esbuild/openharmony-arm64": "0.25.8",
        "@esbuild/sunos-x64": "0.25.8",
        "@esbuild/win32-arm64": "0.25.8",
        "@esbuild/win32-ia32": "0.25.8",
        "@esbuild/win32-x64": "0.25.8"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.32.0.tgz",
      "integrity": "sha512-LSehfdpgMeWcTZkWZVIJl+tkZ2nuSkyyB9C27MZqFWXuph7DvaowgcTvKqxvpLW1JZIk8PN7hFY3Rj9LQ7m7lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.0",
        "@eslint/core": "^0.15.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.32.0",
        "@eslint/plugin-kit": "^0.3.4",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.3.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.3.0.tgz",
      "integrity": "sha512-bqWEnJ1Nt3neqx2q5SFfGS8r/ahumIakg3HcwtNlrVlwXIeNumWn/c7Pn/wKzGhf6SaW6H6uWXLqC30STCMchQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immer": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/immer/-/immer-10.1.1.tgz",
      "integrity": "sha512-s2MPrmjovJcoMaHtx6K11Ra7oD05NT97w1IC5zpMkT6Atjr7H8LjaDd81iIxUYpMKSRRNMJE703M1Fhr/TctHw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jwt-decode": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-4.0.0.tgz",
      "integrity": "sha512-+KJGIyHgkGuIq3IEBNftfhW/LfWhXUIY6OmyVWjliu5KH1y0fw7VQ8YndE2O4qZdMSd9SqbnC8GOcZEy0Om7sA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/libsodium": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/libsodium/-/libsodium-0.7.15.tgz",
      "integrity": "sha512-sZwRknt/tUpE2AwzHq3jEyUU5uvIZHtSssktXq7owd++3CSgn8RGrv6UZJJBpP7+iBghBqe7Z06/2M31rI2NKw==",
      "license": "ISC"
    },
    "node_modules/libsodium-wrappers": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/libsodium-wrappers/-/libsodium-wrappers-0.7.15.tgz",
      "integrity": "sha512-E4anqJQwcfiC6+Yrl01C1m8p99wEhLmJSs0VQqST66SbQXXBoaJY0pF4BNjRYa/sOQAxx6lXAaAFIlx+15tXJQ==",
      "license": "ISC",
      "dependencies": {
        "libsodium": "^0.7.15"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.1.tgz",
      "integrity": "sha512-w8nqGImo45dmMIfljjMwOGtbmC/mk4CMYhWIicdSflH91J9TyCyczcPFXJzrZ/ZXcgGRFeP6BU0BEJTw6tZdfQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.1.tgz",
      "integrity": "sha512-Dlq/5LAZgF0Gaz6yiqZCf6VCcZs1ghAJyrsu84Q/GT0gV+mCxbfmKNoGRKBYMJ8IEdGPqu49YWXD02GCknEDkw==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.1"
      }
    },
    "node_modules/react-icons": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/react-icons/-/react-icons-5.5.0.tgz",
      "integrity": "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-is": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.1.tgz",
      "integrity": "sha512-tr41fA15Vn8p4X9ntI+yCyeGSf1TlYaY5vlTZfQmeLBrFo3psOPX6HhTDnFNL9uj3EhP0KAQ80cugCl4b4BERA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/react-redux": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/react-redux/-/react-redux-9.2.0.tgz",
      "integrity": "sha512-ROY9fvHhwOD9ySfrF0wmvu//bKCQ6AeZZq1nJNtbDC+kk5DuSuNX/n6YWYF/SYy7bSba4D4FSz8DJeKY/S/r+g==",
      "license": "MIT",
      "dependencies": {
        "@types/use-sync-external-store": "^0.0.6",
        "use-sync-external-store": "^1.4.0"
      },
      "peerDependencies": {
        "@types/react": "^18.2.25 || ^19",
        "react": "^18.0 || ^19",
        "redux": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "redux": {
          "optional": true
        }
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.7.1.tgz",
      "integrity": "sha512-jVKHXoWRIsD/qS6lvGveckwb862EekvapdHJN/cGmzw40KnJH5gg53ujOJ4qX6EKIK9LSBfFed/xiQ5yeXNrUA==",
      "license": "MIT",
      "dependencies": {
        "cookie": "^1.0.1",
        "set-cookie-parser": "^2.6.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/react-router-dom": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.7.1.tgz",
      "integrity": "sha512-bavdk2BA5r3MYalGKZ01u8PGuDBloQmzpBZVhDLrOOv1N943Wq6dcM9GhB3x8b7AbqPMEezauv4PeGkAJfy7FQ==",
      "license": "MIT",
      "dependencies": {
        "react-router": "7.7.1"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/recharts": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-3.1.0.tgz",
      "integrity": "sha512-NqAqQcGBmLrfDs2mHX/bz8jJCQtG2FeXfE0GqpZmIuXIjkpIwj8sd9ad0WyvKiBKPd8ZgNG0hL85c8sFDwascw==",
      "license": "MIT",
      "dependencies": {
        "@reduxjs/toolkit": "1.x.x || 2.x.x",
        "clsx": "^2.1.1",
        "decimal.js-light": "^2.5.1",
        "es-toolkit": "^1.39.3",
        "eventemitter3": "^5.0.1",
        "immer": "^10.1.1",
        "react-redux": "8.x.x || 9.x.x",
        "reselect": "5.1.1",
        "tiny-invariant": "^1.3.3",
        "use-sync-external-store": "^1.2.2",
        "victory-vendor": "^37.0.2"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-is": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/redux": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-5.0.1.tgz",
      "integrity": "sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==",
      "license": "MIT"
    },
    "node_modules/redux-thunk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/redux-thunk/-/redux-thunk-3.1.0.tgz",
      "integrity": "sha512-NW2r5T6ksUKXCabzhL9z+h206HQw/NJkcLm1GPImRQ8IzfXwRGqjVhKJGauHirT0DAuyy6hjdnMZaRoAcy0Klw==",
      "license": "MIT",
      "peerDependencies": {
        "redux": "^5.0.0"
      }
    },
    "node_modules/reselect": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/reselect/-/reselect-5.1.1.tgz",
      "integrity": "sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==",
      "license": "MIT"
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.46.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.46.2.tgz",
      "integrity": "sha512-WMmLFI+Boh6xbop+OAGo9cQ3OgX9MIg7xOQjn+pTCwOkk+FNDAeAemXkJ3HzDJrVXleLOFVa1ipuc1AmEx1Dwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.46.2",
        "@rollup/rollup-android-arm64": "4.46.2",
        "@rollup/rollup-darwin-arm64": "4.46.2",
        "@rollup/rollup-darwin-x64": "4.46.2",
        "@rollup/rollup-freebsd-arm64": "4.46.2",
        "@rollup/rollup-freebsd-x64": "4.46.2",
        "@rollup/rollup-linux-arm-gnueabihf": "4.46.2",
        "@rollup/rollup-linux-arm-musleabihf": "4.46.2",
        "@rollup/rollup-linux-arm64-gnu": "4.46.2",
        "@rollup/rollup-linux-arm64-musl": "4.46.2",
        "@rollup/rollup-linux-loongarch64-gnu": "4.46.2",
        "@rollup/rollup-linux-ppc64-gnu": "4.46.2",
        "@rollup/rollup-linux-riscv64-gnu": "4.46.2",
        "@rollup/rollup-linux-riscv64-musl": "4.46.2",
        "@rollup/rollup-linux-s390x-gnu": "4.46.2",
        "@rollup/rollup-linux-x64-gnu": "4.46.2",
        "@rollup/rollup-linux-x64-musl": "4.46.2",
        "@rollup/rollup-win32-arm64-msvc": "4.46.2",
        "@rollup/rollup-win32-ia32-msvc": "4.46.2",
        "@rollup/rollup-win32-x64-msvc": "4.46.2",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/secrets-js": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/secrets-js/-/secrets-js-0.9.2.tgz",
      "integrity": "sha512-3pGxEJ4iId/kYw7QCb9TXKEOn+zXZFqe9moxClKqd5P/Koc2JMsJ+1J9hPCRj2GrvHZhcOyVO9cZRsU+O/NAaQ==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-cookie-parser": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
      "license": "MIT"
    },
    "node_modules/shamirs-secret-sharing": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/shamirs-secret-sharing/-/shamirs-secret-sharing-2.0.1.tgz",
      "integrity": "sha512-gB2iE9Wb7BXfO+ExUU+i7/fdjOK7h4+Mtp9ZGRjmdGSeUq3czN+f/gX2KsKJdebXwG09D3SCRH0aqHmEuR2P6A==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw==",
      "license": "Unlicense"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.38.0",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.38.0.tgz",
      "integrity": "sha512-FsZlrYK6bPDGoLeZRuvx2v6qrM03I0U0SnfCLPs/XCCPCFD80xU9Pg09H/K+XFa68uJuZo7l/Xhs+eDRg2l3hg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.38.0",
        "@typescript-eslint/parser": "8.38.0",
        "@typescript-eslint/typescript-estree": "8.38.0",
        "@typescript-eslint/utils": "8.38.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/undici-types": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "37.3.6",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-37.3.6.tgz",
      "integrity": "sha512-SbPDPdDBYp+5MJHhBCAyI7wKM3d5ivekigc2Dk2s7pgbZ9wIgIBYGVw4zGHBml/qTFbexrofXW6Gu4noGxrOwQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/vite/-/vite-7.0.6.tgz",
      "integrity": "sha512-MHFiOENNBd+Bd9uvc8GEsIzdkn1JxMmEeYX35tI3fv0sJBUTfW5tQsoaOwuY4KhBI09A3dUJ/DXf2yxPVPUceg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.6",
        "picomatch": "^4.0.3",
        "postcss": "^8.5.6",
        "rollup": "^4.40.0",
        "tinyglobby": "^0.2.14"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^20.19.0 || >=22.12.0",
        "jiti": ">=1.21.0",
        "less": "^4.0.0",
        "lightningcss": "^1.21.0",
        "sass": "^1.70.0",
        "sass-embedded": "^1.70.0",
        "stylus": ">=0.54.8",
        "sugarss": "^5.0.0",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

```

`v2/frontend/package.json`

```json
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@noble/hashes": "^1.8.0",
    "jwt-decode": "^4.0.0",
    "libsodium-wrappers": "^0.7.15",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.7.1",
    "recharts": "^3.1.0",
    "secrets-js": "^0.9.2",
    "shamirs-secret-sharing": "^2.0.1",
    "tweetnacl": "^1.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/jwt-decode": "^2.2.1",
    "@types/libsodium-wrappers": "^0.7.14",
    "@types/node": "^24.1.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}

```

`v2/frontend/README.md`

```markdown
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

```

`v2/frontend/src/App.css`

```css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

```

`v2/frontend/src/App.tsx`

```typescript
// src/App.tsx

import { useState, useEffect } from 'react';
import { initializeModules } from './crypto';
import AuthPage from './components/AuthPage';
import Dashboard from './components/Dashboard';
import AdminDashboard from './components/admin/AdminDashboard'; // --- NEW IMPORT ---
import { jwtDecode } from 'jwt-decode';

interface DecodedToken {
  sub: string; // username
  exp: number;
  role: 'user' | 'admin'; // --- NEW: role is now in the token ---
}

function App() {
  const [isInitialized, setIsInitialized] = useState(false);
  const [token, setToken] = useState<string | null>(localStorage.getItem('sentinel_token'));
  const [sessionKeys, setSessionKeys] = useState<{publicKey: Uint8Array, secretKey: Uint8Array} | null>(null);
  
  // --- MODIFIED: This function now also returns the role ---
  const getSessionFromToken = (t: string | null): { username: string; role: 'user' | 'admin' } | null => {
    if (!t) return null;
    try {
      const decoded: DecodedToken = jwtDecode(t);
      if (Date.now() >= decoded.exp * 1000) {
        localStorage.removeItem('sentinel_token');
        return null;
      }
      return { username: decoded.sub, role: decoded.role || 'user' };
    } catch (error) {
      return null;
    }
  };

  const [session, setSession] = useState(getSessionFromToken(token));

  useEffect(() => {
    initializeModules()
      .then(() => setIsInitialized(true))
      .catch(console.error);
  }, []);

  const handleLoginSuccess = (newToken: string, decryptedKeys: {publicKey: Uint8Array, secretKey: Uint8Array}) => {
    localStorage.setItem('sentinel_token', newToken);
    setToken(newToken);
    setSession(getSessionFromToken(newToken));
    setSessionKeys(decryptedKeys);
  };

  const handleLogout = () => {
    localStorage.removeItem('sentinel_token');
    setToken(null);
    setSession(null);
    setSessionKeys(null);
  };

  if (!isInitialized) {
    return <div>Loading cryptographic modules...</div>;
  }

  const renderDashboard = () => {
    if (session && token && sessionKeys) {
      if (session.role === 'admin') {
        return <AdminDashboard token={token} username={session.username} onLogout={handleLogout} />;
      }
      return <Dashboard token={token} username={session.username} keys={sessionKeys} onLogout={handleLogout} />;
    }
    return <AuthPage onLoginSuccess={handleLoginSuccess} />;
  };

  return (
    <>
      {renderDashboard()}
    </>
  );
}

export default App;
```

`v2/frontend/src/components/admin/AdminDashboard.tsx`

```typescript
import { useState, useEffect } from 'react';
import StatCard from './StatCard';
import UserManagement from './UserManagement';
import { FaUsers, FaSignInAlt, FaUserPlus, FaFileAlt, FaTrashRestore } from 'react-icons/fa';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const METADATA_API_URL = 'http://localhost:8000';
const P2P_NODE_URLS = (import.meta.env.VITE_P2P_NODE_URLS || 'http://localhost:8001,http://localhost:8002,http://localhost:8003').split(',');

interface AdminDashboardProps {
  token: string;
  username: string;
  onLogout: () => void;
}

export default function AdminDashboard({ token, username, onLogout }: AdminDashboardProps) {
  const [stats, setStats] = useState<any>(null);
  const [nodeHealth, setNodeHealth] = useState<any[]>([]);
  const [isGcRunning, setIsGcRunning] = useState(false);

  useEffect(() => {
    const fetchAdminData = async () => {
      try {
        const statsRes = await fetch(`${METADATA_API_URL}/admin/stats`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (statsRes.ok) setStats(await statsRes.json());

        const healthPromises = P2P_NODE_URLS.map((url: string) =>
          fetch(`${url}/health`)
            .then(res => res.ok ? res.json() : { status: 'offline', public_url: url })
            .catch(() => ({ status: 'offline', public_url: url }))
        );
        setNodeHealth(await Promise.all(healthPromises));
      } catch (error) {
        console.error("Failed to fetch admin data:", error);
      }
    };
    fetchAdminData();
    const intervalId = setInterval(fetchAdminData, 10000);
    return () => clearInterval(intervalId);
  }, [token]);

  const handleTriggerGc = async () => {
    if (!confirm("Are you sure you want to trigger a network-wide garbage collection? This will permanently delete any orphaned file shares.")) return;
    setIsGcRunning(true);
    try {
      const res = await fetch(`${METADATA_API_URL}/admin/trigger-gc`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await res.json();
      console.log("GC Results:", data);
      alert("Garbage collection cycle completed. Check console and node health panel for results.");
    } catch (error) {
      alert(`Error triggering GC: ${error}`);
    } finally {
      setIsGcRunning(false);
    }
  };

  const pieChartData = stats ? [
    { name: 'Active Users', value: stats.active_users },
    { name: 'Inactive Users', value: stats.total_users - stats.active_users },
  ] : [];

  const barChartData = stats ? [
    { name: 'Activity Today', logins: stats.logins_today, registrations: stats.registrations_today },
  ] : [];

  const COLORS = ['#646cff', '#555'];

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <h1>Admin Panel</h1>
        <button onClick={onLogout} style={{backgroundColor: '#444'}}>Logout ({username})</button>
      </div>

      <div className="card">
        <h2>📊 Key Metrics</h2>
        <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem'}}>
          <StatCard title="Total Users" value={stats?.total_users ?? '...'} icon={<FaUsers />} />
          <StatCard title="Active Users (7d)" value={stats?.active_users ?? '...'} icon={<FaSignInAlt />} />
          <StatCard title="New Users (24h)" value={stats?.registrations_today ?? '...'} icon={<FaUserPlus />} />
          <StatCard title="Total Files Stored" value={stats?.total_files ?? '...'} icon={<FaFileAlt />} />
        </div>
      </div>
      
      <div className="card">
        <h2>🌐 P2P Network Health</h2>
        <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem'}}>
          {nodeHealth.map((node, index) => (
            <div key={index} className="card" style={{margin: 0, backgroundColor: '#1a1a1a'}}>
              <strong>Node URL:</strong> {node.public_url} <br/>
              <strong>Status:</strong> 
              <span style={{color: node.status === 'ok' ? '#4ade80' : '#f87171', fontWeight: 'bold'}}>
                {node.status === 'ok' ? ' Online' : ' Offline'}
              </span> <br/>
              {node.status === 'ok' && (
                <>
                  <strong>Connected Peers:</strong> {node.known_peers} <br/>
                  <strong>Stored Shares:</strong> {node.stored_shards_count}
                </>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className="card">
        <h2>📈 User Activity Overview</h2>
        <div style={{display: 'grid', gridTemplateColumns: '1fr 2fr', gap: '2rem', height: '300px'}}>
          <div>
            <h4>User Status</h4>
            <ResponsiveContainer>
              <PieChart>
                <Pie data={pieChartData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
                  {pieChartData.map((_entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)}
                </Pie>
                <Tooltip wrapperStyle={{backgroundColor: '#333'}} />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div>
            <h4>Activity in Last 24 Hours</h4>
            <ResponsiveContainer>
              <BarChart data={barChartData}>
                <XAxis dataKey="name" />
                <YAxis allowDecimals={false} />
                <Tooltip wrapperStyle={{backgroundColor: '#333'}} />
                <Legend />
                <Bar dataKey="logins" fill="#8884d8" />
                <Bar dataKey="registrations" fill="#82ca9d" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      <div className="card">
        <h2>⚙️ Administrative Actions</h2>
        <button onClick={handleTriggerGc} disabled={isGcRunning}>
          <FaTrashRestore style={{marginRight: '0.5rem'}}/> {isGcRunning ? 'GC in Progress...' : 'Trigger Network Garbage Collection'}
        </button>
      </div>
      
      <UserManagement token={token} />
    </div>
  );
}
```

`v2/frontend/src/components/admin/StatCard.tsx`

```typescript
import React from 'react';

interface StatCardProps {
  title: string;
  value: number | string;
  icon: React.ReactNode;
}

export default function StatCard({ title, value, icon }: StatCardProps) {
  return (
    <div className="card" style={{ margin: 0, backgroundColor: '#1a1a1a', textAlign: 'left' }}>
      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
        <div style={{ fontSize: '2rem', color: '#646cff' }}>{icon}</div>
        <div>
          <h4 style={{ margin: 0, color: '#888' }}>{title}</h4>
          <p style={{ margin: 0, fontSize: '1.5em', fontWeight: 'bold' }}>{value}</p>
        </div>
      </div>
    </div>
  );
}
```

`v2/frontend/src/components/admin/UserManagement.tsx`

```typescript
// src/components/admin/UserManagement.tsx

import React, { useState, useEffect } from 'react';
import { FaTrash, FaChevronDown, FaChevronUp, FaSyncAlt } from 'react-icons/fa';
// --- CORRECTED IMPORT PATH ---
import { getShamirParams } from '../../crypto';
import type { ImportanceLevel } from '../../crypto';

const METADATA_API_URL = 'http://localhost:8000';

interface UserManagementProps {
  token: string;
}

export default function UserManagement({ token }: UserManagementProps) {
  const [users, setUsers] = useState<any[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedUser, setExpandedUser] = useState<string | null>(null);
  const [userFiles, setUserFiles] = useState<any[]>([]);
  const [isLoadingFiles, setIsLoadingFiles] = useState(false);

  const fetchUsers = async () => {
    try {
      const res = await fetch(`${METADATA_API_URL}/admin/users`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (res.ok) setUsers(await res.json());
    } catch (error) {
      console.error("Failed to fetch users:", error);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, [token]);

  const handleToggleUser = async (username: string) => {
    if (expandedUser === username) {
      setExpandedUser(null);
      setUserFiles([]);
    } else {
      setExpandedUser(username);
      setIsLoadingFiles(true);
      try {
        // --- CORRECTED: Call the new admin-specific endpoint ---
        const res = await fetch(`${METADATA_API_URL}/admin/users/${username}/files`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (res.ok) {
          setUserFiles(await res.json());
        } else {
          throw new Error("Failed to fetch user's files.");
        }
      } catch (error) {
        console.error(`Failed to fetch files for ${username}:`, error);
        setUserFiles([]); // Clear files on error
      } finally {
        setIsLoadingFiles(false);
      }
    }
  };

 const handleReShard = async (file: any) => {
    const newLevel = prompt(`Re-shard "${file.filename}" to new importance level (Normal, Important, Critical):`, "Critical");
    if (!newLevel || !['Normal', 'Important', 'Critical'].includes(newLevel as string)) {
      alert("Invalid level.");
      return;
    }
    
    // --- CORRECTED: Prompt for the password instead of hardcoding it ---
    const ownerPassword = prompt(`CRITICAL ACTION: Enter the password for user "${file.owner}" to proceed with re-sharding.`);
    if (!ownerPassword) {
      alert("Password not provided. Re-sharding cancelled.");
      return;
    }
    
    const params = getShamirParams(newLevel as ImportanceLevel);
    
    try {
      const res = await fetch(`${METADATA_API_URL}/admin/files/${file._id}/re-shard`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({ ...params, owner_password: ownerPassword })
      });
      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.detail);
      }
      alert("File re-sharding initiated successfully. Check server logs for progress.");
      // Refresh the files for the user to see the change
      // Note: We need to re-toggle to trigger the fetch
      await handleToggleUser(file.owner); // Close it
      await handleToggleUser(file.owner); // And re-open it to refresh
    } catch (error) {
      alert(`Error: ${error}`);
    }
  };

  const handleDelete = async (username: string) => {
    if (!confirm(`Are you sure you want to delete the user "${username}"? This will also delete all of their files.`)) return;
    
    try {
      const res = await fetch(`${METADATA_API_URL}/admin/users/${username}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (res.ok) {
        alert(`User "${username}" deleted successfully.`);
        fetchUsers();
      } else {
        const err = await res.json();
        throw new Error(err.detail || "Failed to delete user.");
      }
    } catch (error) {
      alert(`Error: ${error}`);
    }
  };

  const filteredUsers = users.filter(u => 
    u.username.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="card">
      <h2>👥 User Management</h2>
      <div className="input-group">
        <input 
          type="text" 
          placeholder="Search users..." 
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
      <ul style={{ listStyle: 'none', padding: 0 }}>
        {filteredUsers.map(user => (
          <React.Fragment key={user._id}>
            <li style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0.5rem', borderBottom: '1px solid #333' }}>
              <div style={{display: 'flex', alignItems: 'center', cursor: 'pointer', flexGrow: 1}} onClick={() => handleToggleUser(user.username)}>
                {expandedUser === user.username ? <FaChevronUp /> : <FaChevronDown />}
                <strong style={{marginLeft: '1rem'}}>{user.username}</strong>
                <span style={{ marginLeft: '1rem', padding: '0.2rem 0.5rem', backgroundColor: user.role === 'admin' ? '#166534' : '#1d4ed8', borderRadius: '4px', fontSize: '0.8em' }}>
                  {user.role}
                </span>
              </div>
              <button onClick={() => handleDelete(user.username)} disabled={user.role === 'admin'} style={{ backgroundColor: '#b91c1c' }}>
                <FaTrash />
              </button>
            </li>
            {expandedUser === user.username && (
              <div style={{padding: '1rem', backgroundColor: '#1a1a1a'}}>
                {isLoadingFiles ? <p>Loading files...</p> : (
                  <>
                    <h4>Files owned by {user.username}</h4>
                    {userFiles.length > 0 ? (
                      userFiles.map(file => (
                        <div key={file._id} style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0.2rem'}}>
                          <span>{file.filename} (n={file.erasure.n}, k={file.erasure.k})</span>
                          <button onClick={() => handleReShard(file)} style={{fontSize: '0.8em', padding: '0.4em 0.8em'}}>
                            <FaSyncAlt style={{marginRight: '0.5rem'}}/> Re-shard
                          </button>
                        </div>
                      ))
                    ) : <p>No files found for this user.</p>}
                  </>
                )}
              </div>
            )}
          </React.Fragment>
        ))}
      </ul>
    </div>
  );
}
```

`v2/frontend/src/components/AuthPage.tsx`

```typescript
import React, { useState } from 'react';
import { deriveKeyFromPassword, decryptSymmetric, base64ToUint8Array, generateKeyPair, encryptSymmetric, uint8ArrayToBase64 } from '../crypto';

const METADATA_API_URL = 'http://localhost:8000';

interface AuthPageProps {
  onLoginSuccess: (token: string, keys: { publicKey: Uint8Array; secretKey: Uint8Array }) => void;
}

export default function AuthPage({ onLoginSuccess }: AuthPageProps) {
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!username || !password) {
      alert("Username and password are required.");
      return;
    }
    setIsProcessing(true);
    setMessage('Processing...');
    
    try {
      if (isLogin) {
        // --- Login Flow (Unchanged) ---
        setMessage('Authenticating...');
        const formData = new URLSearchParams();
        formData.append('username', username);
        formData.append('password', password);

        const loginResponse = await fetch(`${METADATA_API_URL}/auth/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: formData,
        });
        const loginData = await loginResponse.json();
        if (!loginResponse.ok) throw new Error(loginData.detail || "Login failed.");
        
        const token = loginData.access_token;
        setMessage('Authentication successful. Decrypting session keys...');

        const meResponse = await fetch(`${METADATA_API_URL}/me`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const meData = await meResponse.json();
        if (!meResponse.ok) throw new Error(meData.detail || "Could not fetch user keys.");

        const salt = new Uint8Array(16).fill(1);
        const passwordKey = await deriveKeyFromPassword(password, salt);
        const [nonceB64, encryptedSkB64] = meData.encrypted_private_key.split(':');
        const decryptedSk = decryptSymmetric(base64ToUint8Array(encryptedSkB64), base64ToUint8Array(nonceB64), passwordKey);
        
        if (!decryptedSk) throw new Error("Failed to decrypt private key. Incorrect password.");

        const keys = {
          publicKey: base64ToUint8Array(meData.public_key),
          secretKey: decryptedSk
        };

        onLoginSuccess(token, keys);

      } else {
        // --- Registration Flow (Unchanged) ---
        setMessage('Generating cryptographic keys...');
        const keyPair = generateKeyPair();
        
        setMessage('Encrypting your private key with your password...');
        const salt = new Uint8Array(16).fill(1);
        const passwordKey = await deriveKeyFromPassword(password, salt);
        const { ciphertext: encryptedPrivateKey, nonce } = encryptSymmetric(keyPair.secretKey, passwordKey);

        const payload = {
          username,
          password,
          public_key: uint8ArrayToBase64(keyPair.publicKey),
          encrypted_private_key: `${uint8ArrayToBase64(nonce)}:${uint8ArrayToBase64(encryptedPrivateKey)}`
        };

        const response = await fetch(`${METADATA_API_URL}/auth/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        const data = await response.json();
        if (!response.ok) throw new Error(data.detail || "Registration failed.");
        
        setMessage('Registration successful! Please log in.');
        setIsLogin(true);
      }
    } catch (error: any) {
      setMessage(`Error: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="card" style={{ maxWidth: '400px', margin: '5rem auto' }}>
      <h2>{isLogin ? 'Login' : 'Register'}</h2>
      <form onSubmit={handleSubmit}>
        <div className="input-group">
          <label htmlFor="username">Username</label>
          {/* --- START OF MODIFICATION --- */}
          <input id="username" type="text" value={username} onChange={(e) => setUsername(e.target.value)} required minLength={3} />
          {/* --- END OF MODIFICATION --- */}
        </div>
        <div className="input-group">
          <label htmlFor="password">Password</label>
          {/* --- START OF MODIFICATION --- */}
          <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required minLength={6} />
          {/* --- END OF MODIFICATION --- */}
        </div>
        <button type="submit" disabled={isProcessing}>{isProcessing ? 'Processing...' : (isLogin ? 'Login' : 'Register')}</button>
      </form>
      <p style={{ marginTop: '1rem', textAlign: 'center' }}>
        {isLogin ? "Don't have an account?" : 'Already have an account?'}
        <button onClick={() => setIsLogin(!isLogin)} style={{ background: 'none', border: 'none', color: '#646cff', cursor: 'pointer', marginLeft: '0.5rem' }}>
          {isLogin ? 'Register' : 'Login'}
        </button>
      </p>
      {message && <p style={{ textAlign: 'center', fontStyle: 'italic' }}>{message}</p>}
    </div>
  );
}
```

`v2/frontend/src/components/Dashboard.tsx`

```typescript
import React, { useState, useEffect, useMemo } from 'react';
import FileDetailsModal from './FileDetailsModal';
import {
  generateSymmetricKey,
  encryptSymmetric,
  decryptSymmetric,
  encryptAsymmetric,
  decryptAsymmetric,
  createShares,
  combineShares,
  hashData,
  uint8ArrayToBase64,
  base64ToUint8Array
} from '../crypto';

const P2P_NODE_URLS = (import.meta.env.VITE_P2P_NODE_URLS || 'http://localhost:8001,http://localhost:8002,http://localhost:8003').split(',');
const METADATA_API_URL = 'http://localhost:8000';

function getRandomNodeUrl(): string {
  return P2P_NODE_URLS[Math.floor(Math.random() * P2P_NODE_URLS.length)];
}

type ImportanceLevel = 'Normal' | 'Important' | 'Critical';

function getShamirParams(importance: ImportanceLevel): { n: number; k: number } {
  switch (importance) {
    case 'Normal': return { n: 5, k: 3 };
    case 'Important': return { n: 7, k: 5 };
    case 'Critical': return { n: 10, k: 7 };
  }
}

type SortKey = 'filename' | 'createdAt';
type SortDirection = 'ascending' | 'descending';

interface DashboardProps {
  token: string;
  username: string;
  keys: { publicKey: Uint8Array; secretKey: Uint8Array };
  onLogout: () => void;
}

export default function Dashboard({ token, username, keys, onLogout }: DashboardProps) {
  const [filesToUpload, setFilesToUpload] = useState<FileList | null>(null);
  const [importance, setImportance] = useState<ImportanceLevel>('Normal');
  const [isProcessing, setIsProcessing] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);
  const [myFiles, setMyFiles] = useState<any[]>([]);
  const [sharedFiles, setSharedFiles] = useState<any[]>([]);
  const [selectedFileDetails, setSelectedFileDetails] = useState<any>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [nodeHealth, setNodeHealth] = useState<any[]>([]);
  const [selectedFileIds, setSelectedFileIds] = useState<Set<string>>(new Set());
  const [myFilesSearch, setMyFilesSearch] = useState('');
  const [sharedFilesSearch, setSharedFilesSearch] = useState('');
  const [sortConfig, setSortConfig] = useState<{ key: SortKey; direction: SortDirection }>({ key: 'createdAt', direction: 'descending' });
  
  // --- START OF MODIFICATION 1: Add state for progress tracking ---
  const [progress, setProgress] = useState(0);
  const [progressMessage, setProgressMessage] = useState('');
  // --- END OF MODIFICATION 1 ---

  const log = (message: string) => setLogs(prev => [`[${new Date().toLocaleTimeString()}] ${message}`, ...prev]);

  const fetchUserFiles = async () => {
    try {
      const response = await fetch(`${METADATA_API_URL}/files`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (!response.ok) throw new Error('Failed to fetch files.');
      const files = await response.json();
      setMyFiles(files);
    } catch (error) {
      console.error(`Error fetching files: ${error}`);
    }
  };

  const fetchSharedFiles = async () => {
    try {
      const response = await fetch(`${METADATA_API_URL}/files/shared-with-me`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (!response.ok) throw new Error('Failed to fetch shared files.');
      const files = await response.json();
      setSharedFiles(files);
    } catch (error) {
      console.error(`Error fetching shared files: ${error}`);
    }
  };

  useEffect(() => {
    log("✅ Session ready. Fetching files...");
    fetchUserFiles();
    fetchSharedFiles();
  }, [token]);

  useEffect(() => {
    const fetchNodeHealth = async () => {
      const healthPromises = P2P_NODE_URLS.map((url: string) =>
        fetch(`${url}/health`)
          .then(res => res.ok ? res.json() : { status: 'offline', public_url: url })
          .catch(() => ({ status: 'offline', public_url: url }))
      );
      const healthResults = await Promise.all(healthPromises);
      setNodeHealth(healthResults);
    };

    fetchNodeHealth();
    const intervalId = setInterval(fetchNodeHealth, 5000);
    return () => clearInterval(intervalId);
  }, []);

  const handleMultiUpload = async () => {
    if (!filesToUpload || !keys) return;
    const password = prompt(`Please enter your account password to encrypt and upload ${filesToUpload.length} file(s):`);
    if (!password) return;

    setIsProcessing(true);
    // --- START OF MODIFICATION 2: Reset progress state before upload ---
    setProgress(0);
    setProgressMessage('');
    // --- END OF MODIFICATION 2 ---
    setLogs([]);
    log(`Starting bulk upload of ${filesToUpload.length} file(s)...`);
    
    for (let i = 0; i < filesToUpload.length; i++) {
      const file = filesToUpload[i];
      const currentFileProgress = `(${i + 1}/${filesToUpload.length})`;
      log(`\n--- Uploading file ${currentFileProgress}: "${file.name}" ---`);
      
      try {
        setProgressMessage(`Encrypting ${file.name}...`);
        log('1. Generating file key...');
        const fileKey = generateSymmetricKey();
        
        log('2. Encrypting file...');
        const fileBuffer = await file.arrayBuffer();
        const fileData = new Uint8Array(fileBuffer);
        const { ciphertext, nonce } = encryptSymmetric(fileData, fileKey);

        const { n, k } = getShamirParams(importance);
        setProgressMessage(`Splitting ${file.name} into shares...`);
        log(`3. Applying Shamir's Sharing (n=${n}, k=${k})...`);
        const allShares = createShares(ciphertext, n, k);

        setProgressMessage(`Uploading shares for ${file.name}...`);
        log('4. Uploading shares to P2P network...');
        
        // --- START OF MODIFICATION 3: Parallelize share uploads ---
        const shareHashes: string[] = [];
        const uploadPromises = allShares.map(async (share) => {
          const hash = await hashData(share);
          // Note: We collect hashes here, but order doesn't strictly matter for the manifest
          const nodeUrl = getRandomNodeUrl();
          const response = await fetch(`${nodeUrl}/p2p/store`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ key: hash, value: uint8ArrayToBase64(share) })
          });
          if (!response.ok) {
            throw new Error(`Failed to upload share ${hash.substring(0, 6)}...`);
          }
          // We push to the array *after* the hash is calculated to avoid race conditions
          return hash;
        });

        // Execute all upload promises in parallel and collect the resulting hashes
        const resolvedHashes = await Promise.all(uploadPromises);
        // --- END OF MODIFICATION 3 ---

        log('5. Encrypting file key for owner...');
        const encryptedFileKey = encryptAsymmetric(fileKey, keys.publicKey);

        log('6. Creating and uploading manifest...');
        const manifest = { name: file.name, type: file.type, erasure: { n, k }, shards: resolvedHashes, crypto: { nonce: uint8ArrayToBase64(nonce),ciphertextLength: ciphertext.length } };
        const manifestData = new TextEncoder().encode(JSON.stringify(manifest));
        const finalRootHash = await hashData(manifestData);
        const nodeUrl = getRandomNodeUrl();
        await fetch(`${nodeUrl}/p2p/store`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ key: finalRootHash, value: uint8ArrayToBase64(manifestData) })
        });

        log('7. Saving file metadata...');
        await fetch(`${METADATA_API_URL}/files`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
          body: JSON.stringify({
            filename: file.name,
            root_hash: finalRootHash,
            encrypted_file_key: uint8ArrayToBase64(encryptedFileKey),
            erasure: { n, k }
          })
        });
        log(`✅ Successfully uploaded "${file.name}".`);

        // --- START OF MODIFICATION 4: Update overall progress ---
        setProgress(((i + 1) / filesToUpload.length) * 100);
        // --- END OF MODIFICATION 4 ---

      } catch (error) {
        log(`❌ An error occurred while uploading "${file.name}": ${error}`);
        setProgressMessage(`Error on ${file.name}. Aborting.`);
        break; 
      }
    }
    log(`\n🎉 BULK UPLOAD COMPLETE!`);
    fetchUserFiles();
    setIsProcessing(false);
    // --- START OF MODIFICATION 5: Reset progress on completion/error ---
    setProgress(0);
    setProgressMessage('');
    // --- END OF MODIFICATION 5 ---
  };

  // ... (all other handler functions like handleMultiDownload, handleShare, etc. remain unchanged) ...
  const handleMultiDownload = async () => {
    if (selectedFileIds.size === 0 || !keys) return;
    
    setIsProcessing(true);
    setLogs([]);
    log(`Starting bulk download of ${selectedFileIds.size} file(s)...`);
    
    const selectedFiles = myFiles.filter(f => selectedFileIds.has(f._id));

    for (let i = 0; i < selectedFiles.length; i++) {
      const file = selectedFiles[i];
      log(`\n--- Downloading file ${i + 1} of ${selectedFiles.length}: "${file.filename}" ---`);
      try {
        const fileId = file._id;
        log("1. Verifying permission and fetching access key...");
        const keyRes = await fetch(`${METADATA_API_URL}/files/${fileId}/access-key`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!keyRes.ok) {
          const errData = await keyRes.json();
          throw new Error(errData.detail || "Permission check failed.");
        }
        const keyData = await keyRes.json();
        const encryptedFileKey = base64ToUint8Array(keyData.encrypted_file_key);
        log("✅ Permission verified.");

        log("2. Decrypting File Key...");
        const fileKey = decryptAsymmetric(encryptedFileKey, keys.secretKey);
        if (!fileKey) throw new Error("Failed to decrypt file key.");
        log('✅ File key decrypted.');

        log("3. Fetching manifest...");
        const res = await fetch(`${getRandomNodeUrl()}/p2p/get/${file.root_hash}`);
        if (!res.ok) throw new Error('Manifest not found.');
        const json = await res.json();
        const manifestData = JSON.parse(new TextDecoder().decode(base64ToUint8Array(json.value)));
        log('✅ Manifest retrieved.');

        const { k } = manifestData.erasure;
        log(`4. Fetching shares (need at least ${k})...`);
        const promises = manifestData.shards.map((hash: string) => 
          fetch(`${getRandomNodeUrl()}/p2p/get/${hash}`).then(res => res.ok ? res.json() : null)
        );
        const results = await Promise.all(promises);
        const retrievedShares = results.filter(Boolean).map((json: any) => base64ToUint8Array(json.value));

        if (retrievedShares.length < k) throw new Error(`Failed to retrieve enough shares. Needed ${k}, got ${retrievedShares.length}.`);
        log(`✅ Retrieved ${retrievedShares.length} shares.`);

        log('5. Reconstructing and decrypting file...');
        const ciphertext = combineShares(retrievedShares.slice(0, k));
        const nonce = base64ToUint8Array(manifestData.crypto.nonce);
        const plaintext = decryptSymmetric(ciphertext, nonce, fileKey);
        if (!plaintext) throw new Error('DECRYPTION FAILED.');
        log('✅ Decryption successful!');

        log('6. Triggering download...');
        const blob = new Blob([plaintext as BlobPart], { type: manifestData.type });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = manifestData.name;
        a.click();
        URL.revokeObjectURL(url);
        log(`✅ Successfully downloaded "${file.filename}".`);

      } catch (error: any) {
        log(`❌ Download Error for "${file.filename}": ${error.message}`);
        break;
      }
    }
    log(`\n🎉 BULK DOWNLOAD COMPLETE!`);
    setSelectedFileIds(new Set());
    setIsProcessing(false);
  };
  
  const handleDownload = async (file: any) => {
    if (!keys) return;
    setIsProcessing(true);
    setLogs([]);
    log(`Starting download for ${file.filename}...`);
    try {
      const fileId = file._id || file.file_id;
      if (!fileId) throw new Error("File ID is missing.");

      log("1. Verifying permission and fetching access key...");
      const keyRes = await fetch(`${METADATA_API_URL}/files/${fileId}/access-key`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (!keyRes.ok) {
        const errData = await keyRes.json();
        throw new Error(errData.detail || "Permission check failed.");
      }
      const keyData = await keyRes.json();
      const encryptedFileKey = base64ToUint8Array(keyData.encrypted_file_key);
      log("✅ Permission verified and key received.");

      log(`\n2. Decrypting File Key...`);
      const fileKey = decryptAsymmetric(encryptedFileKey, keys.secretKey);
      if (!fileKey) throw new Error("Failed to decrypt file key.");
      log('✅ File key decrypted.');

      log(`\n3. Fetching manifest...`);
      const nodeUrl = getRandomNodeUrl();
      const res = await fetch(`${nodeUrl}/p2p/get/${file.root_hash}`);
      if (!res.ok) throw new Error('Manifest not found on P2P network.');
      const json = await res.json();
      const manifestData = JSON.parse(new TextDecoder().decode(base64ToUint8Array(json.value)));
      log('✅ Manifest retrieved.');

      const { k } = manifestData.erasure;
      log(`\n4. Fetching shares (need at least ${k})...`);
      const promises = manifestData.shards.map((hash: string) => 
        fetch(`${getRandomNodeUrl()}/p2p/get/${hash}`).then(res => res.ok ? res.json() : null)
      );
      const results = await Promise.all(promises);
      const retrievedShares = results.filter(Boolean).map((json: any) => base64ToUint8Array(json.value));

      if (retrievedShares.length < k) throw new Error(`Failed to retrieve enough shares. Needed ${k}, got ${retrievedShares.length}.`);
      log(`✅ Retrieved ${retrievedShares.length} shares.`);

      log('\n5. Reconstructing and decrypting file...');
      const ciphertext = combineShares(retrievedShares.slice(0, k));
      const nonce = base64ToUint8Array(manifestData.crypto.nonce);
      const plaintext = decryptSymmetric(ciphertext, nonce, fileKey);
      if (!plaintext) throw new Error('DECRYPTION FAILED. Data may be corrupt.');
      log('✅ Decryption successful!');

      log('\n6. Triggering download...');
      const blob = new Blob([plaintext as BlobPart], { type: manifestData.type });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = manifestData.name;
      a.click();
      URL.revokeObjectURL(url);
      log('🎉 DOWNLOAD COMPLETE!');

      await fetch(`${METADATA_API_URL}/logs/record`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({
          action: "DOWNLOAD_FILE",
          file_id: fileId,
          filename: file.filename
        })
      });

    } catch (error: any) {
      log(`❌ Download Error: ${error.message}`);
      alert(`Download Error: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleMultiShare = async () => {
    if (selectedFileIds.size === 0 || !keys) return;
    const recipientUsernamesRaw = prompt(`Enter usernames to share ${selectedFileIds.size} file(s) with, separated by commas (e.g., bob, charlie):`);
    if (!recipientUsernamesRaw) return;

    const recipientUsernames = recipientUsernamesRaw.split(',').map(u => u.trim()).filter(Boolean);
    if (recipientUsernames.length === 0) return;

    setIsProcessing(true);
    setLogs([]);
    log(`Starting bulk share to ${recipientUsernames.join(', ')}...`);
    try {
      log("1. Fetching recipient public keys...");
      const pubKeysRes = await fetch(`${METADATA_API_URL}/users/public-keys`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({ usernames: recipientUsernames })
      });
      if (!pubKeysRes.ok) throw new Error("Could not fetch recipient public keys.");
      const recipients: {username: string, public_key: string}[] = await pubKeysRes.json();
      
      const foundUsernames = new Set(recipients.map(r => r.username));
      const notFoundUsernames = recipientUsernames.filter(u => !foundUsernames.has(u));
      if (notFoundUsernames.length > 0) {
        log(`⚠️ Warning: The following users were not found and will be skipped: ${notFoundUsernames.join(', ')}`);
      }
      log(`✅ Found public keys for ${recipients.length} user(s).`);

      const selectedFiles = myFiles.filter(f => selectedFileIds.has(f._id));
      for (const file of selectedFiles) {
        log(`\n--- Sharing file: "${file.filename}" ---`);
        
        log("  - Decrypting file key with your private key...");
        const encryptedFileKey = base64ToUint8Array(file.encrypted_file_key);
        const fileKey = decryptAsymmetric(encryptedFileKey, keys.secretKey);
        if (!fileKey) {
          log("  - ❌ Could not decrypt the file key. Skipping.");
          continue;
        }
        log("  - ✅ File key decrypted.");

        for (const recipient of recipients) {
          log(`  - Re-encrypting file key for ${recipient.username}...`);
          const recipientPublicKey = base64ToUint8Array(recipient.public_key);
          const encryptedKeyForRecipient = encryptAsymmetric(fileKey, recipientPublicKey);
          
          log(`  - Granting access to ${recipient.username} via API...`);
          const shareRes = await fetch(`${METADATA_API_URL}/files/${file._id}/share`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
            body: JSON.stringify({
              share_with_username: recipient.username,
              encrypted_file_key_for_recipient: uint8ArrayToBase64(encryptedKeyForRecipient)
            })
          });
          if (shareRes.ok) {
            log(`    ✅ Successfully shared with ${recipient.username}.`);
          } else {
            const errData = await shareRes.json();
            log(`    ❌ Failed to share with ${recipient.username}: ${errData.detail}`);
          }
        }
      }
      log(`\n🎉 BULK SHARE COMPLETE!`);
    } catch (error: any) {
      log(`❌ An error occurred during bulk share: ${error.message}`);
    } finally {
      setSelectedFileIds(new Set());
      setIsProcessing(false);
    }
  };

  const handleMultiDelete = async () => {
    if (selectedFileIds.size === 0) return;
    const password = prompt(`To confirm deletion of ${selectedFileIds.size} file(s), please enter your account password:`);
    if (!password) {
      log("Deletion cancelled.");
      return;
    }
    
    setIsProcessing(true);
    setLogs([]);
    log(`Attempting to delete ${selectedFileIds.size} file(s)...`);
    try {
      const response = await fetch(`${METADATA_API_URL}/files/delete-bulk`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({ 
          file_ids: Array.from(selectedFileIds),
          password: password 
        })
      });

      if (response.status === 401) {
        const errData = await response.json();
        throw new Error(errData.detail || 'Incorrect password.');
      }
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.detail || 'Failed to delete files.');
      }
      
      log(`✅ ${selectedFileIds.size} file entries deleted successfully.`);
      fetchUserFiles();
      setSelectedFileIds(new Set());
    } catch (error: any) {
      log(`❌ Error deleting files: ${error.message}`);
      alert(`Error: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };
  
  const handleUnshare = async (usernameToUnshare: string) => {
    if (!selectedFileDetails) return;
    log(`Attempting to unshare "${selectedFileDetails.filename}" from ${usernameToUnshare}...`);
    try {
      const response = await fetch(`${METADATA_API_URL}/files/${selectedFileDetails._id}/unshare`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({ username: usernameToUnshare })
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.detail || "Failed to unshare file.");
      }
      alert(`Successfully unshared with ${usernameToUnshare}`);
      log(`✅ Successfully unshared "${selectedFileDetails.filename}" from ${usernameToUnshare}.`);
      handleDetails(selectedFileDetails._id);
    } catch (error: any) {
      log(`❌ Error unsharing file: ${error.message}`);
      alert(`Error: ${error.message}`);
    }
  };

  const handleMultiUnshare = async () => {
    if (selectedFileIds.size === 0) return;
    const usernameToUnshare = prompt(`Enter the username to unshare ${selectedFileIds.size} file(s) from:`);
    if (!usernameToUnshare) return;

    setIsProcessing(true);
    setLogs([]);
    log(`Attempting to unshare ${selectedFileIds.size} file(s) from ${usernameToUnshare}...`);
    try {
      const response = await fetch(`${METADATA_API_URL}/files/unshare-bulk`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({ 
          file_ids: Array.from(selectedFileIds),
          username: usernameToUnshare 
        })
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.detail || 'Failed to unshare files.');
      }
      log(`✅ Successfully unshared files from ${usernameToUnshare}.`);
      alert(`Successfully unshared files from ${usernameToUnshare}.`);
    } catch (error: any) {
      log(`❌ Error unsharing files: ${error.message}`);
      alert(`Error: ${error.message}`);
    } finally {
      setSelectedFileIds(new Set());
      setIsProcessing(false);
    }
  };

  const handleDetails = async (fileId: string) => {
    setIsProcessing(true);
    try {
      const response = await fetch(`${METADATA_API_URL}/files/${fileId}/details`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (!response.ok) throw new Error("Failed to fetch file details.");
      const details = await response.json();
      setSelectedFileDetails(details);
      setIsDetailsModalOpen(true);
    } catch (error: any) {
      alert(`Error: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleFileSelect = (fileId: string) => {
    setSelectedFileIds(prevSelected => {
      const newSelected = new Set(prevSelected);
      if (newSelected.has(fileId)) {
        newSelected.delete(fileId);
      } else {
        newSelected.add(fileId);
      }
      return newSelected;
    });
  };

  const sortedAndFilteredMyFiles = useMemo(() => {
    return myFiles
      .filter(f => f.filename.toLowerCase().includes(myFilesSearch.toLowerCase()))
      .sort((a, b) => {
        if (sortConfig.key === 'createdAt') {
          const dateA = new Date(a.createdAt).getTime();
          const dateB = new Date(b.createdAt).getTime();
          return sortConfig.direction === 'ascending' ? dateA - dateB : dateB - dateA;
        }
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
  }, [myFiles, myFilesSearch, sortConfig]);

  const filteredSharedFiles = sharedFiles.filter(f => 
    f.filename.toLowerCase().includes(sharedFilesSearch.toLowerCase()) ||
    f.owner.toLowerCase().includes(sharedFilesSearch.toLowerCase())
  );

  const isAllSelected = sortedAndFilteredMyFiles.length > 0 && selectedFileIds.size === sortedAndFilteredMyFiles.length;

  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.checked) {
      const allFileIds = new Set(sortedAndFilteredMyFiles.map(f => f._id));
      setSelectedFileIds(allFileIds);
    } else {
      setSelectedFileIds(new Set());
    }
  };

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <h1>Welcome, {username}</h1>
        <button onClick={onLogout} style={{backgroundColor: '#444'}}>Logout</button>
      </div>
      
      <div className="card">
        <h2>P2P Network Status</h2>
        <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem'}}>
          {nodeHealth.map((node, index) => (
            <div key={index} className="card" style={{margin: 0, backgroundColor: '#1a1a1a'}}>
              <strong>Node URL:</strong> {node.public_url} <br/>
              <strong>Status:</strong> 
              <span style={{color: node.status === 'ok' ? '#4ade80' : '#f87171', fontWeight: 'bold'}}>
                {node.status === 'ok' ? ' Online' : ' Offline'}
              </span> <br/>
              {node.status === 'ok' && (
                <>
                  <strong>Connected Peers:</strong> {node.known_peers} <br/>
                  <strong>Stored Shares:</strong> {node.stored_shards_count}
                </>
              )}
            </div>
          ))}
        </div>
      </div>

      <div className="card">
        <h2>Upload Files</h2>
        <div className="input-group">
          <input type="file" multiple onChange={(e) => setFilesToUpload(e.target.files)} />
        </div>
        <div className="input-group">
          <label>Importance Level for this batch</label>
          <div className="radio-group">
            {(['Normal', 'Important', 'Critical'] as ImportanceLevel[]).map(level => (
              <label key={level}>
                <input type="radio" name="importance" value={level} checked={importance === level} onChange={() => setImportance(level)} /> {level}
              </label>
            ))}
          </div>
        </div>
        {/* --- START OF MODIFICATION 6: Update button text and add progress bar --- */}
        <button onClick={handleMultiUpload} disabled={isProcessing || !filesToUpload}>
          {isProcessing ? `Processing... ${progressMessage} (${Math.round(progress)}%)` : 'Upload File(s)'}
        </button>
        {isProcessing && (
          <div style={{ marginTop: '1rem' }}>
            <div style={{ marginBottom: '0.5rem', fontSize: '0.9em', color: '#888' }}>
              Overall Progress:
            </div>
            <div style={{ backgroundColor: '#1a1a1a', borderRadius: '8px', overflow: 'hidden', border: '1px solid #444' }}>
              <div style={{ width: `${progress}%`, backgroundColor: '#646cff', padding: '4px', transition: 'width 0.3s ease-in-out', textAlign: 'center', color: 'white', fontSize: '0.8em' }}>
                {Math.round(progress)}%
              </div>
            </div>
          </div>
        )}
        {/* --- END OF MODIFICATION 6 --- */}
      </div>

      <div className="card">
        <h2>My Files</h2>
        <div style={{display: 'flex', justifyContent: 'space-between', gap: '1rem', marginBottom: '1rem'}}>
          <input 
            type="text" 
            placeholder="Filter by name..." 
            value={myFilesSearch}
            onChange={(e) => setMyFilesSearch(e.target.value)}
            style={{flexGrow: 1}}
          />
          <select 
            value={`${sortConfig.key}-${sortConfig.direction}`} 
            onChange={(e) => {
              const [key, direction] = e.target.value.split('-') as [SortKey, SortDirection];
              setSortConfig({ key, direction });
            }}
            style={{padding: '12px', backgroundColor: '#1a1a1a', border: '1px solid #444', borderRadius: '8px', color: 'white'}}
          >
            <option value="createdAt-descending">Date (Newest)</option>
            <option value="createdAt-ascending">Date (Oldest)</option>
            <option value="filename-ascending">Name (A-Z)</option>
            <option value="filename-descending">Name (Z-A)</option>
          </select>
        </div>

        {selectedFileIds.size > 0 && (
          <div style={{ backgroundColor: '#1d4ed8', padding: '1rem', borderRadius: '8px', marginBottom: '1rem', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <span>{selectedFileIds.size} file(s) selected</span>
            <div>
              <button onClick={handleMultiDownload} disabled={isProcessing} style={{ marginRight: '0.5rem' }}>Download Selected</button>
              <button onClick={handleMultiShare} disabled={isProcessing} style={{ marginRight: '0.5rem', backgroundColor: '#166534' }}>Share Selected</button>
              <button onClick={handleMultiUnshare} disabled={isProcessing} style={{ marginRight: '0.5rem', backgroundColor: '#ca8a04' }}>Unshare Selected</button>
              <button onClick={handleMultiDelete} disabled={isProcessing} style={{ backgroundColor: '#b91c1c' }}>Delete Selected</button>
            </div>
          </div>
        )}
        {sortedAndFilteredMyFiles.length > 0 ? (
          <ul style={{listStyle: 'none', padding: 0}}>
            <li style={{display: 'flex', alignItems: 'center', padding: '0.5rem', borderBottom: '1px solid #555', fontWeight: 'bold'}}>
              <input type="checkbox" style={{marginRight: '1rem'}} checked={isAllSelected} onChange={handleSelectAll} />
              <span style={{flexGrow: 1}}>Filename</span>
              <span>Date Created</span>
            </li>
            {sortedAndFilteredMyFiles.map(f => (
              <li key={f._id} style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0.5rem', borderBottom: '1px solid #333'}}>
                <div style={{display: 'flex', alignItems: 'center', flexGrow: 1}}>
                  <input type="checkbox" style={{marginRight: '1rem'}} checked={selectedFileIds.has(f._id)} onChange={() => handleFileSelect(f._id)} />
                  <span>{f.filename}</span>
                </div>
                <span style={{marginRight: '1rem', color: '#888', fontSize: '0.9em'}}>{new Date(f.createdAt).toLocaleDateString()}</span>
                <div>
                  <button onClick={() => handleDetails(f._id)} disabled={isProcessing} style={{backgroundColor: '#1d4ed8'}}>Details</button>
                </div>
              </li>
            ))}
          </ul>
        ) : <p>No files match your search.</p>}
      </div>

      <div className="card">
        <h2>Files Shared With Me</h2>
        <div className="input-group">
          <input 
            type="text" 
            placeholder="Search shared files by name or owner..." 
            value={sharedFilesSearch}
            onChange={(e) => setSharedFilesSearch(e.target.value)}
          />
        </div>
        {filteredSharedFiles.length > 0 ? (
          <ul style={{listStyle: 'none', padding: 0}}>
            {filteredSharedFiles.map(f => (
              <li key={f.file_id} style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0.5rem', borderBottom: '1px solid #333'}}>
                <span>{f.filename} (from {f.owner})</span>
                <div>
                  <button onClick={() => handleDetails(f.file_id)} disabled={isProcessing} style={{marginRight: '0.5rem', backgroundColor: '#1d4ed8'}}>Details</button>
                  <button onClick={() => handleDownload(f)} disabled={isProcessing}>Download</button>
                </div>
              </li>
            ))}
          </ul>
        ) : <p>No shared files match your search.</p>}
      </div>

      {logs.length > 0 && 
        <div className="card">
          <h2>Activity Logs</h2>
          <div className="logs">{logs.join('\n')}</div>
        </div>
      }

      {isDetailsModalOpen && (
        <FileDetailsModal 
          fileDetails={selectedFileDetails}
          onClose={() => setIsDetailsModalOpen(false)}
          onUnshare={handleUnshare}
          isOwner={selectedFileDetails?.owner === username}
        />
      )}
    </div>
  );
}
```

`v2/frontend/src/components/FileDetailsModal.tsx`

```typescript
// src/components/FileDetailsModal.tsx
import React from 'react';

interface FileDetailsModalProps {
  fileDetails: any;
  onClose: () => void;
  onUnshare: (username: string) => void;
  isOwner: boolean;
}

// --- NEW: Helper function to format log messages ---
const formatLogMessage = (log: any) => {
  const actionText = log.action.replace(/_/g, ' ').toLowerCase();
  let detailsText = '';

  if (log.action === 'SHARE_FILE' && log.details.shared_with) {
    detailsText = ` with ${log.details.shared_with}`;
  } else if (log.action === 'UNSHARE_FILE' && log.details.unshared_from) {
    detailsText = ` from ${log.details.unshared_from}`;
  } else if (log.action === 'DOWNLOAD_FILE') {
    // No extra details needed for download
  }

  return `${log.username} ${actionText}${detailsText}.`;
};

export default function FileDetailsModal({ fileDetails, onClose, onUnshare, isOwner }: FileDetailsModalProps) {
  if (!fileDetails) return null;

  return (
    <div style={styles.overlay}>
      <div style={styles.modal}>
        <button onClick={onClose} style={styles.closeButton}>×</button>
        <h2>File Details: {fileDetails.filename}</h2>
        
        <div style={styles.section}>
          <h3>Properties</h3>
          <p><strong>Owner:</strong> {fileDetails.owner}</p>
          <p><strong>Root Hash:</strong> <span style={{wordBreak: 'break-all'}}>{fileDetails.root_hash}</span></p>
          <p><strong>Fault Tolerance:</strong> {fileDetails.erasure.n} total shares, {fileDetails.erasure.k} required</p>
        </div>

        {isOwner && (
          <div style={styles.section}>
            <h3>Sharing Status</h3>
            {fileDetails.sharing_info.length > 0 ? (
              <ul>
                {fileDetails.sharing_info.map((share: any) => (
                  <li key={share.shared_with_user} style={styles.shareItem}>
                    <span>Shared with: <strong>{share.shared_with_user}</strong></span>
                    <button onClick={() => onUnshare(share.shared_with_user)} style={styles.unshareBtn}>Unshare</button>
                  </li>
                ))}
              </ul>
            ) : <p>Not shared with anyone.</p>}
          </div>
        )}

        <div style={styles.section}>
          <h3>Activity Log</h3>
          <div style={styles.logBox}>
            {fileDetails.activity_log.length > 0 ? (
              fileDetails.activity_log.map((log: any) => (
                <p key={log.timestamp} style={styles.logEntry}>
                  <strong>{new Date(log.timestamp).toLocaleString()}:</strong>
                  {/* --- MODIFIED: Use the formatting function --- */}
                  <span> {formatLogMessage(log)}</span>
                </p>
              ))
            ) : <p>No activity recorded for this file.</p>}
          </div>
        </div>
      </div>
    </div>
  );
}

// ... (styles object remains the same) ...
const styles: { [key: string]: React.CSSProperties } = {
  overlay: { position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0,0,0,0.7)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 },
  modal: { backgroundColor: '#242424', padding: '2rem', borderRadius: '12px', width: '90%', maxWidth: '600px', maxHeight: '90vh', overflowY: 'auto', position: 'relative' },
  closeButton: { position: 'absolute', top: '1rem', right: '1rem', background: 'none', border: 'none', color: 'white', fontSize: '1.5rem', cursor: 'pointer' },
  section: { marginTop: '1.5rem', borderTop: '1px solid #444', paddingTop: '1rem' },
  shareItem: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' },
  unshareBtn: { backgroundColor: '#b91c1c', padding: '0.4em 0.8em', fontSize: '0.9em' },
  logBox: { maxHeight: '200px', overflowY: 'auto', backgroundColor: '#1a1a1a', padding: '0.5rem', borderRadius: '8px' },
  logEntry: { margin: '0.5rem 0', fontSize: '0.9em', borderBottom: '1px solid #333', paddingBottom: '0.5rem' }
};
```

`v2/frontend/src/crypto.ts`

```typescript
// src/crypto.ts

import nacl from 'tweetnacl';
import { pbkdf2 } from '@noble/hashes/pbkdf2';
import { sha512 } from '@noble/hashes/sha512';
import { randomBytes } from '@noble/hashes/utils';
// Import from the correct, existing library 'shamirs-secret-sharing'
import { split, combine } from 'shamirs-secret-sharing';

export async function initializeModules() {
  return Promise.resolve();
}

// --- Helper functions (Unchanged) ---
export function uint8ArrayToBase64(data: Uint8Array): string {
    const CHUNK_SIZE = 0x8000;
    let result = '';
    for (let i = 0; i < data.length; i += CHUNK_SIZE) {
        const chunk = data.subarray(i, i + CHUNK_SIZE);
        result += String.fromCharCode.apply(null, Array.from(chunk));
    }
    return btoa(result);
}

export function base64ToUint8Array(base64: string): Uint8Array {
    const binary_string = atob(base64);
    const len = binary_string.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes;
}

// --- Core Cryptographic Functions (Unchanged) ---
export async function hashData(data: Uint8Array): Promise<string> {
  const hashBuffer = await window.crypto.subtle.digest('SHA-256', data as BufferSource);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

export async function deriveKeyFromPassword(password: string, salt: Uint8Array): Promise<Uint8Array> {
  return pbkdf2(sha512, password, salt, { c: 100000, dkLen: 32 });
}

export function generateKeyPair(): { publicKey: Uint8Array; secretKey: Uint8Array } {
  const keyPair = nacl.box.keyPair();
  return { publicKey: keyPair.publicKey, secretKey: keyPair.secretKey };
}

export function encryptAsymmetric(message: Uint8Array, recipientPublicKey: Uint8Array): Uint8Array {
  const ephemeralKeyPair = nacl.box.keyPair();
  const nonce = randomBytes(nacl.box.nonceLength);
  const encryptedMessage = nacl.box(message, nonce, recipientPublicKey, ephemeralKeyPair.secretKey);
  const fullMessage = new Uint8Array(ephemeralKeyPair.publicKey.length + nonce.length + encryptedMessage.length);
  fullMessage.set(ephemeralKeyPair.publicKey);
  fullMessage.set(nonce, ephemeralKeyPair.publicKey.length);
  fullMessage.set(encryptedMessage, ephemeralKeyPair.publicKey.length + nonce.length);
  return fullMessage;
}

export function decryptAsymmetric(fullMessage: Uint8Array, userSecretKey: Uint8Array): Uint8Array | null {
  const senderPublicKey = fullMessage.slice(0, nacl.box.publicKeyLength);
  const nonce = fullMessage.slice(nacl.box.publicKeyLength, nacl.box.publicKeyLength + nacl.box.nonceLength);
  const ciphertext = fullMessage.slice(nacl.box.publicKeyLength + nacl.box.nonceLength);
  return nacl.box.open(ciphertext, nonce, senderPublicKey, userSecretKey);
}

export function generateSymmetricKey(): Uint8Array {
  return randomBytes(nacl.secretbox.keyLength);
}

export function encryptSymmetric(data: Uint8Array, key: Uint8Array): { ciphertext: Uint8Array; nonce: Uint8Array } {
  const nonce = randomBytes(nacl.secretbox.nonceLength);
  const ciphertext = nacl.secretbox(data, nonce, key);
  return { ciphertext, nonce };
}
export function decryptSymmetric(ciphertext: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array | null {
  return nacl.secretbox.open(ciphertext, nonce, key);
}

// --- Fault Tolerance using a Standard Shamir's Library (Simplified) ---
export function createShares(data: Uint8Array, totalShares: number, requiredShares: number): Uint8Array[] {
  // The library takes the secret as bytes and returns shares as bytes. This is perfect.
  const shares = split(data, { shares: totalShares, threshold: requiredShares });
  return shares;
}

export function combineShares(receivedShares: Uint8Array[]): Uint8Array {
  // The library takes the byte shares and returns the reconstructed secret as bytes.
  const combined = combine(receivedShares);
  return combined;
}

// --- Shared utility function ---
export type ImportanceLevel = 'Normal' | 'Important' | 'Critical';

export function getShamirParams(importance: ImportanceLevel): { n: number; k: number } {
  switch (importance) {
    case 'Normal': return { n: 5, k: 3 };
    case 'Important': return { n: 7, k: 5 };
    case 'Critical': return { n: 10, k: 7 };
  }
}
```

`v2/frontend/src/custom.d.ts`

```typescript
// This file tells TypeScript about the shape of JavaScript libraries that don't have their own types.
declare module 'shamirs-secret-sharing' {
  export function split(secret: Uint8Array, options: { shares: number; threshold: number }): Uint8Array[];
  export function combine(shares: Uint8Array[]): Uint8Array;
}
```

`v2/frontend/src/index.css`

```css
:root {
  font-family: 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  color-scheme: dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #1a1a1a;
}

body {
  margin: 0;
  display: flex;
  justify-content: center;
  min-width: 320px;
  min-height: 100vh;
  padding: 2rem;
}

#root {
  width: 100%;
  max-width: 900px;
  margin: 0 auto;
  text-align: center;
}

h1 {
  font-size: 2.5em;
  line-height: 1.1;
  color: #646cff;
  margin-bottom: 0.5rem;
}

h2 {
  border-bottom: 1px solid #444;
  padding-bottom: 0.5rem;
  margin-top: 2rem;
  text-align: left;
  color: rgba(255, 255, 255, 0.87);
}

p {
  color: rgba(255, 255, 255, 0.6);
}

.card {
  background-color: #242424;
  border: 1px solid #333;
  padding: 1.5rem;
  border-radius: 12px;
  margin-top: 2rem;
  text-align: left;
}

.input-group {
  margin: 1rem 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.input-group label {
  font-weight: 500;
  font-size: 0.9em;
}

input[type="file"],
input[type="password"],
input[type="text"] {
  width: calc(100% - 24px);
  padding: 12px;
  background-color: #1a1a1a;
  border: 1px solid #444;
  border-radius: 8px;
  color: white;
  font-size: 1em;
}

input[type="file"] {
  padding: 8px;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.8em 1.5em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #646cff;
  color: white;
  cursor: pointer;
  transition: all 0.25s;
}

button:hover {
  background-color: #535bf2;
  box-shadow: 0 0 15px rgba(100, 108, 255, 0.5);
}

button:disabled {
  background-color: #333;
  cursor: not-allowed;
  box-shadow: none;
}

.radio-group {
  display: flex;
  gap: 1rem;
  margin: 1rem 0;
}

.radio-group label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.logs {
  background-color: #1a1a1a;
  padding: 1rem;
  border-radius: 8px;
  white-space: pre-wrap;
  word-wrap: break-word;
  max-height: 250px;
  overflow-y: auto;
  font-family: 'Courier New', Courier, monospace;
  font-size: 0.9em;
  border: 1px solid #333;
  margin-top: 1rem;
}

.shard-selector {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 1rem;
}

.shard-checkbox {
  border: 1px solid #555;
  padding: 8px 12px;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
  gap: 8px;
}

.shard-checkbox:hover {
  background-color: #333;
}

.status {
  font-weight: bold;
  margin-left: 10px;
}
.status.possible { color: #4ade80; }
.status.impossible { color: #f87171; }
```

`v2/frontend/src/main.tsx`

```typescript
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

```

`v2/frontend/src/vite-env.d.ts`

```typescript
/// <reference types="vite/client" />

```

`v2/frontend/tsconfig.app.json`

```json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

```

`v2/frontend/tsconfig.json`

```json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

```

`v2/frontend/tsconfig.node.json`

```json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

```

`v2/frontend/vite.config.ts`

```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    include: ['tweetnacl-util'],
  },
})
```

`v2/metadata_service/.env`

```
# Replace with your actual MongoDB Atlas connection string
MONGO_URL="mongodb+srv://sakethnarkidimilli1234:root@sentinelstore.4k2vxl9.mongodb.net/?retryWrites=true&w=majority&appName=SentinelStore"

# These are for JWT token creation. Generate your own random strings for production.
# You can generate a secret key with: openssl rand -hex 32
JWT_SECRET_KEY="09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
JWT_ALGORITHM="HS256"
```

`v2/metadata_service/auth.py`

```python
import os
from datetime import datetime, timedelta, timezone
from passlib.context import CryptContext
from jose import JWTError, jwt
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from dotenv import load_dotenv
from models import TokenData

load_dotenv()

JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM")
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["argon2"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    return encoded_jwt

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    return token_data.username

# --- NEW: Dependency to get the current admin user ---
async def get_current_admin_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    forbidden_exception = HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail="User does not have admin privileges",
    )
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        username: str = payload.get("sub")
        role: str = payload.get("role")
        if username is None or role is None:
            raise credentials_exception
        if role != "admin":
            raise forbidden_exception
        token_data = TokenData(username=username, role=role)
    except JWTError:
        raise credentials_exception
    return token_data
```

`v2/metadata_service/database.py`

```python
import os
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

load_dotenv()

MONGO_URL = os.getenv("MONGO_URL")

client = AsyncIOMotorClient(MONGO_URL)
db = client.sentinelstore

# Create collections for users, their files, and sharing permissions
user_collection = db.get_collection("users")
file_collection = db.get_collection("files")
access_control_collection = db.get_collection("access_control")
logs_collection = db.get_collection("logs")
```

`v2/metadata_service/Dockerfile`

```
FROM python:3.10-slim

WORKDIR /app

# Uninstall any old or conflicting crypto libraries first to ensure a clean state
RUN pip uninstall -y crypto pycrypto

COPY requirements.txt .

# Install our dependencies
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

`v2/metadata_service/main.py`

```python
import os
import secrets
import json
from datetime import datetime, timezone, timedelta
from fastapi import FastAPI, Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from bson import ObjectId
from typing import List
import httpx

from database import user_collection, file_collection, access_control_collection, logs_collection
from models import (
    UserRegisterSchema, FileCreateSchema, FileResponseSchema, 
    TokenSchema, FileDeleteSchema, SharedFileResponseSchema,
    ShareRequestSchema, FileDetailsResponseSchema,
    UserPublicKeysRequest, UserPublicKeyResponse, FileBulkDeleteSchema, FileBulkUnshareSchema
)
from auth import (
    get_password_hash, verify_password, create_access_token, 
    get_current_user, get_current_admin_user
)
from worker import re_shard_file

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origin_regex=r"http://localhost:\d+",
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def create_log_entry(request: Request, username: str, action: str, status: str, details: dict = None):
    log_entry = {
        "timestamp": datetime.now(timezone.utc),
        "username": username,
        "action": action,
        "ip_address": request.client.host if request else "N/A",
        "user_agent": request.headers.get("user-agent") if request else "N/A",
        "status": status,
        "details": details or {}
    }
    await logs_collection.insert_one(log_entry)

@app.post("/logs/record", status_code=status.HTTP_201_CREATED)
async def record_log_entry(request: Request, details: dict, current_user: str = Depends(get_current_user)):
    action = details.pop("action", "UNKNOWN_CLIENT_ACTION")
    await create_log_entry(request, current_user, action, "SUCCESS", details)
    return {"message": "Log recorded"}

# --- Authentication and User Routes ---

@app.post("/auth/register", status_code=status.HTTP_201_CREATED)
async def register_user(request: Request, user: UserRegisterSchema):
    existing_user = await user_collection.find_one({"username": user.username})
    if existing_user:
        await create_log_entry(request, user.username, "REGISTER_ATTEMPT", "FAILURE", {"reason": "Username already exists"})
        raise HTTPException(status_code=400, detail="Username already registered")
    
    salt = secrets.token_hex(16)
    hashed_password = get_password_hash(user.password)
    
    new_user = {
        "username": user.username,
        "hashed_password": hashed_password,
        "salt": salt,
        "public_key": user.public_key,
        "encrypted_private_key": user.encrypted_private_key,
        "role": "user"
    }
    await user_collection.insert_one(new_user)
    await create_log_entry(request, user.username, "REGISTER", "SUCCESS")
    return {"message": "User registered successfully"}

@app.post("/auth/login", response_model=TokenSchema)
async def login_for_access_token(request: Request, form_data: OAuth2PasswordRequestForm = Depends()):
    user = await user_collection.find_one({"username": form_data.username})
    if not user or not verify_password(form_data.password, user["hashed_password"]):
        await create_log_entry(request, form_data.username, "LOGIN_ATTEMPT", "FAILURE", {"reason": "Incorrect username or password"})
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password")
    
    await create_log_entry(request, form_data.username, "LOGIN", "SUCCESS")
    
    access_token = create_access_token(data={"sub": user["username"], "role": user.get("role", "user")})
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/{username}")
async def get_user_info(username: str, current_user: str = Depends(get_current_user)):
    user = await user_collection.find_one({"username": username})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return { "username": user["username"], "public_key": user["public_key"] }

@app.post("/users/public-keys", response_model=List[UserPublicKeyResponse])
async def get_users_public_keys(request: UserPublicKeysRequest, current_user: str = Depends(get_current_user)):
    users_cursor = user_collection.find({"username": {"$in": request.usernames}})
    users = await users_cursor.to_list(len(request.usernames))
    found_users = [
        UserPublicKeyResponse(username=user["username"], public_key=user["public_key"])
        for user in users
    ]
    return found_users

@app.get("/me")
async def get_my_info(current_user: str = Depends(get_current_user)):
    user = await user_collection.find_one({"username": current_user})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return {
        "username": user["username"],
        "public_key": user["public_key"],
        "encrypted_private_key": user["encrypted_private_key"]
    }

# --- File Management Routes ---

@app.post("/files", response_model=FileResponseSchema)
async def add_file_entry(request: Request, file: FileCreateSchema, current_user: str = Depends(get_current_user)):
    file_doc = {
        "filename": file.filename,
        "root_hash": file.root_hash,
        "encrypted_file_key": file.encrypted_file_key,
        "owner": current_user,
        "erasure": file.erasure,
        "createdAt": datetime.now(timezone.utc)
    }
    result = await file_collection.insert_one(file_doc)
    created_file = await file_collection.find_one({"_id": result.inserted_id})
    created_file["_id"] = str(created_file["_id"])
    
    await create_log_entry(request, current_user, "UPLOAD_FILE", "SUCCESS", {"file_id": str(result.inserted_id), "filename": file.filename})
    return created_file

@app.get("/files", response_model=List[FileResponseSchema])
async def list_my_files(current_user: str = Depends(get_current_user)):
    files = await file_collection.find({"owner": current_user}).to_list(1000)
    for file in files:
        file["_id"] = str(file["_id"])
    return files

@app.get("/files/{file_id}/details", response_model=FileDetailsResponseSchema)
async def get_file_details(file_id: str, current_user: str = Depends(get_current_user)):
    try:
        obj_id = ObjectId(file_id)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid file ID format")

    file_doc = await file_collection.find_one({"_id": obj_id})
    if not file_doc:
        raise HTTPException(status_code=404, detail="File not found")

    is_owner = file_doc["owner"] == current_user
    
    if not is_owner:
        is_shared_with = await access_control_collection.find_one({
            "file_id": file_id,
            "shared_with_user": current_user
        })
        if not is_shared_with:
            raise HTTPException(status_code=403, detail="You do not have permission to view this file's details")

    sharing_cursor = access_control_collection.find({"file_id": file_id})
    sharing_info = await sharing_cursor.to_list(1000)

    log_cursor = logs_collection.find({"details.file_id": file_id}).sort("timestamp", -1)
    activity_log = await log_cursor.to_list(100)

    file_doc["_id"] = str(file_doc["_id"])
    file_doc["sharing_info"] = sharing_info
    file_doc["activity_log"] = activity_log
    
    return file_doc

@app.get("/files/{file_id}/access-key")
async def get_access_key(file_id: str, current_user: str = Depends(get_current_user)):
    try:
        obj_id = ObjectId(file_id)
    except:
        raise HTTPException(status_code=400, detail="Invalid file ID format")

    file_doc = await file_collection.find_one({"_id": obj_id})
    if not file_doc:
        raise HTTPException(status_code=404, detail="File not found")

    if file_doc["owner"] == current_user:
        return {"encrypted_file_key": file_doc["encrypted_file_key"]}

    share_doc = await access_control_collection.find_one({
        "file_id": file_id,
        "shared_with_user": current_user
    })
    if share_doc:
        return {"encrypted_file_key": share_doc["encrypted_file_key_for_recipient"]}
    
    raise HTTPException(status_code=403, detail="You do not have permission to access this file.")

@app.post("/files/delete-bulk", status_code=status.HTTP_204_NO_CONTENT)
async def secure_bulk_delete_file_entries(
    request: Request, delete_request: FileBulkDeleteSchema,
    current_user: str = Depends(get_current_user)
):
    user = await user_collection.find_one({"username": current_user})
    if not user or not verify_password(delete_request.password, user["hashed_password"]):
        await create_log_entry(request, current_user, "DELETE_BULK_ATTEMPT", "FAILURE", {"reason": "Incorrect password"})
        raise HTTPException(status_code=401, detail="Incorrect password. Deletion denied.")

    try:
        object_ids = [ObjectId(fid) for fid in delete_request.file_ids]
    except Exception:
        raise HTTPException(status_code=400, detail="One or more file IDs are invalid.")

    delete_result = await file_collection.delete_many({
        "_id": {"$in": object_ids},
        "owner": current_user
    })

    await access_control_collection.delete_many({
        "file_id": {"$in": delete_request.file_ids}
    })

    await create_log_entry(
        request, current_user, "DELETE_BULK", "SUCCESS", 
        {"deleted_count": delete_result.deleted_count, "file_ids": delete_request.file_ids}
    )
    return

# --- File Sharing Routes ---

@app.post("/files/{file_id}/share", status_code=status.HTTP_201_CREATED)
async def share_file(request: Request, file_id: str, share_request: ShareRequestSchema, current_user: str = Depends(get_current_user)):
    try:
        obj_id = ObjectId(file_id)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid file ID format")

    file_to_share = await file_collection.find_one({"_id": obj_id})
    if not file_to_share:
        raise HTTPException(status_code=404, detail="File not found")
    if file_to_share["owner"] != current_user:
        raise HTTPException(status_code=403, detail="Only the owner can share this file")

    recipient = await user_collection.find_one({"username": share_request.share_with_username})
    if not recipient:
        raise HTTPException(status_code=404, detail="Recipient user not found")

    existing_share = await access_control_collection.find_one({
        "file_id": file_id,
        "shared_with_user": share_request.share_with_username
    })
    if existing_share:
        raise HTTPException(status_code=400, detail="File is already shared with this user")

    share_doc = {
        "file_id": file_id,
        "owner": current_user,
        "shared_with_user": share_request.share_with_username,
        "encrypted_file_key_for_recipient": share_request.encrypted_file_key_for_recipient,
        "permission": "read"
    }
    await access_control_collection.insert_one(share_doc)
    await create_log_entry(request, current_user, "SHARE_FILE", "SUCCESS", {"file_id": file_id, "filename": file_to_share["filename"], "shared_with": share_request.share_with_username})
    return {"message": f"File successfully shared with {share_request.share_with_username}"}

@app.post("/files/{file_id}/unshare", status_code=status.HTTP_204_NO_CONTENT)
async def unshare_file(request: Request, file_id: str, share_info: dict, current_user: str = Depends(get_current_user)):
    user_to_unshare = share_info.get("username")
    if not user_to_unshare:
        raise HTTPException(status_code=400, detail="Username to unshare is required")

    try:
        obj_id = ObjectId(file_id)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid file ID format")

    file_doc = await file_collection.find_one({"_id": obj_id})
    if not file_doc or file_doc["owner"] != current_user:
        raise HTTPException(status_code=403, detail="Only the owner can unshare this file")

    result = await access_control_collection.delete_one({
        "file_id": file_id,
        "shared_with_user": user_to_unshare
    })

    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Sharing entry not found")

    await create_log_entry(request, current_user, "UNSHARE_FILE", "SUCCESS", {"file_id": file_id, "unshared_from": user_to_unshare})
    return

@app.post("/files/unshare-bulk", status_code=status.HTTP_204_NO_CONTENT)
async def secure_bulk_unshare_file_entries(
    request: Request, unshare_request: FileBulkUnshareSchema,
    current_user: str = Depends(get_current_user)
):
    try:
        object_ids = [ObjectId(fid) for fid in unshare_request.file_ids]
    except Exception:
        raise HTTPException(status_code=400, detail="One or more file IDs are invalid.")

    owned_files_count = await file_collection.count_documents({
        "_id": {"$in": object_ids},
        "owner": current_user
    })
    if owned_files_count != len(unshare_request.file_ids):
        raise HTTPException(status_code=403, detail="You do not own all the specified files.")

    await access_control_collection.delete_many({
        "file_id": {"$in": unshare_request.file_ids},
        "shared_with_user": unshare_request.username
    })

    await create_log_entry(
        request, current_user, "UNSHARE_BULK", "SUCCESS", 
        {"unshared_from": unshare_request.username, "file_ids": unshare_request.file_ids}
    )
    return

@app.get("/files/shared-with-me", response_model=List[SharedFileResponseSchema])
async def list_files_shared_with_me(current_user: str = Depends(get_current_user)):
    shared_entries = await access_control_collection.find({"shared_with_user": current_user}).to_list(1000)
    
    response_files = []
    for entry in shared_entries:
        file_doc = await file_collection.find_one({"_id": ObjectId(entry["file_id"])})
        if file_doc:
            response_files.append({
                "file_id": entry["file_id"],
                "filename": file_doc["filename"],
                "root_hash": file_doc["root_hash"],
                "owner": file_doc["owner"],
                "encrypted_file_key": entry["encrypted_file_key_for_recipient"]
            })
    return response_files

# --- Admin Section ---

@app.get("/admin/stats")
async def get_admin_stats(admin_user: dict = Depends(get_current_admin_user)):
    total_users = await user_collection.count_documents({})
    
    seven_days_ago = datetime.now(timezone.utc) - timedelta(days=7)
    active_user_pipeline = [
        {"$match": {"action": "LOGIN", "status": "SUCCESS", "timestamp": {"$gte": seven_days_ago}}},
        {"$group": {"_id": "$username"}},
        {"$count": "count"}
    ]
    active_user_result = await logs_collection.aggregate(active_user_pipeline).to_list(1)
    active_users = active_user_result[0]["count"] if active_user_result else 0

    logins_today = await logs_collection.count_documents({
        "action": "LOGIN", "status": "SUCCESS",
        "timestamp": {"$gte": datetime.now(timezone.utc) - timedelta(days=1)}
    })
    
    registrations_today = await logs_collection.count_documents({
        "action": "REGISTER", "status": "SUCCESS",
        "timestamp": {"$gte": datetime.now(timezone.utc) - timedelta(days=1)}
    })

    total_files = await file_collection.count_documents({})

    return {
        "total_users": total_users,
        "active_users": active_users,
        "logins_today": logins_today,
        "registrations_today": registrations_today,
        "total_files": total_files
    }

@app.get("/admin/users")
async def get_all_users(admin_user: dict = Depends(get_current_admin_user)):
    users_cursor = user_collection.find({})
    users = await users_cursor.to_list(1000)
    for user in users:
        del user["hashed_password"]
        del user["salt"]
        del user["encrypted_private_key"]
        user["_id"] = str(user["_id"])
    return users

@app.delete("/admin/users/{username}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_user_by_admin(username: str, admin_user: dict = Depends(get_current_admin_user)):
    if username == admin_user.username:
        raise HTTPException(status_code=400, detail="Admin cannot delete their own account.")
    
    delete_result = await user_collection.delete_one({"username": username})
    if delete_result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="User not found.")
    
    await file_collection.delete_many({"owner": username})
    await access_control_collection.delete_many({"owner": username})
    await access_control_collection.delete_many({"shared_with_user": username})
    
    return

@app.post("/admin/files/{file_id}/re-shard")
async def admin_re_shard_file(
    file_id: str, 
    new_params: dict, # Expects {"n": 10, "k": 7, "owner_password": "..."}
    admin_user: dict = Depends(get_current_admin_user)
):
    try:
        obj_id = ObjectId(file_id)
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid file ID format")

    file_doc = await file_collection.find_one({"_id": obj_id})
    if not file_doc:
        raise HTTPException(status_code=404, detail="File not found")

    owner_doc = await user_collection.find_one({"username": file_doc["owner"]})
    if not owner_doc:
        raise HTTPException(status_code=404, detail="File owner not found")

    new_n = new_params.get("n")
    new_k = new_params.get("k")
    owner_password = new_params.get("owner_password") # Get the password from the request
    if not all([new_n, new_k, owner_password]):
        raise HTTPException(status_code=400, detail="New 'n', 'k', and 'owner_password' parameters are required.")

    # --- VERIFY THE OWNER'S PASSWORD ---
    # This is a critical security check before proceeding.
    if not verify_password(owner_password, owner_doc["hashed_password"]):
        raise HTTPException(status_code=401, detail="The provided password for the file owner is incorrect.")

    try:
        # --- CORRECTED: Pass the owner_password to the worker function ---
        new_root_hash, new_encrypted_file_key = await re_shard_file(file_doc, owner_doc, new_n, new_k, owner_password)
        
        await file_collection.update_one(
            {"_id": obj_id},
            {"$set": {
                "root_hash": new_root_hash,
                "encrypted_file_key": new_encrypted_file_key,
                "erasure": {"n": new_n, "k": new_k}
            }}
        )
        
        return {"message": "File re-sharded successfully", "new_root_hash": new_root_hash}
    except Exception as e:
        print(f"Re-sharding failed: {e}")
        raise HTTPException(status_code=500, detail=f"An internal error occurred during re-sharding: {e}")

@app.post("/admin/trigger-gc")
async def trigger_gc_on_all_nodes(admin_user: dict = Depends(get_current_admin_user)):
    print("Admin triggered network-wide Garbage Collection.")
    
    all_files = await file_collection.find({}).to_list(None)
    active_hashes = set()
    for file_doc in all_files:
        active_hashes.add(file_doc["root_hash"])
        # The manifest on the P2P network contains the shard hashes
        # A more robust GC would fetch manifests to get all active shard hashes
    
    active_hashes_list = list(active_hashes)
    print(f"Found {len(active_hashes_list)} active root hashes in the database.")

    p2p_node_urls = [
        "http://p2p_node_0:8001",
        "http://p2p_node_1:8001",
        "http://p2p_node_2:8001",
    ]
    
    results = {}
    async with httpx.AsyncClient(timeout=60.0) as client:
        for url in p2p_node_urls:
            try:
                print(f"Triggering GC on node: {url}")
                # A more robust GC would send all shard hashes, not just root hashes
                response = await client.post(f"{url}/gc", json=active_hashes_list)
                response.raise_for_status()
                results[url] = response.json()
            except Exception as e:
                results[url] = {"status": "error", "detail": str(e)}
    
    print("Garbage Collection cycle complete.")
    return results

# --- NEW: Admin endpoint to get a specific user's files ---
@app.get("/admin/users/{username}/files", response_model=List[FileResponseSchema])
async def get_user_files_by_admin(username: str, admin_user: dict = Depends(get_current_admin_user)):
    # Check if the user exists
    user = await user_collection.find_one({"username": username})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Fetch the files owned by that user
    files = await file_collection.find({"owner": username}).to_list(1000)
    for file in files:
        file["_id"] = str(file["_id"])
    return files

```

`v2/metadata_service/models.py`

```python
from pydantic import BaseModel, Field
from typing import List, Optional
from bson import ObjectId
from datetime import datetime

# --- User Schemas ---
class UserRegisterSchema(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    password: str = Field(..., min_length=6)
    public_key: str
    encrypted_private_key: str

class UserLoginSchema(BaseModel):
    username: str
    password: str

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    salt: str
    public_key: str
    encrypted_private_key: str
    role: str = "user" # Role defaults to "user"

class TokenSchema(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: str | None = None
    role: str | None = None # Role is now part of the token data

# --- File Schemas ---
class FileCreateSchema(BaseModel):
    filename: str
    root_hash: str
    encrypted_file_key: str
    erasure: dict

class FileResponseSchema(BaseModel):
    id: str = Field(..., alias="_id")
    filename: str
    root_hash: str
    owner: str
    encrypted_file_key: str
    erasure: dict
    createdAt: datetime

    class Config:
        populate_by_name = True
        json_encoders = { ObjectId: str }

class FileDeleteSchema(BaseModel):
    password: str

class FileBulkDeleteSchema(BaseModel):
    file_ids: List[str]
    password: str

# --- Sharing & Details Schemas ---
class ShareRequestSchema(BaseModel):
    share_with_username: str
    encrypted_file_key_for_recipient: str

class SharedFileResponseSchema(BaseModel):
    file_id: str
    filename: str
    root_hash: str
    owner: str
    encrypted_file_key: str

class LogEntrySchema(BaseModel):
    timestamp: datetime
    action: str
    username: str
    status: str
    details: dict

class SharingInfoSchema(BaseModel):
    shared_with_user: str
    permission: str

class FileDetailsResponseSchema(BaseModel):
    id: str = Field(..., alias="_id")
    filename: str
    root_hash: str
    owner: str
    erasure: dict
    sharing_info: List[SharingInfoSchema]
    activity_log: List[LogEntrySchema]

    class Config:
        populate_by_name = True
        json_encoders = { ObjectId: str }

class UserPublicKeysRequest(BaseModel):
    usernames: List[str]

class UserPublicKeyResponse(BaseModel):
    username: str
    public_key: str

class FileBulkUnshareSchema(BaseModel):
    file_ids: List[str]
    username: str



```

`v2/metadata_service/requirements.txt`

```
fastapi
uvicorn
python-multipart
motor
passlib[argon2]
python-jose[cryptography]
python-dotenv
python-dateutil
httpx
shamirs
pynacl
```

`v2/metadata_service/worker.py`

```python
import os
import httpx
import json
import hashlib
import base64
from typing import List, Optional
import asyncio
import random

# Import the correct, existing library AND the 'share' class
import shamirs
from shamirs import share

from nacl.public import PrivateKey, PublicKey, Box
from nacl.secret import SecretBox
from nacl.utils import random as nacl_random

# --- Configuration ---
P2P_NODE_URLS_STR = os.getenv("P2P_NODE_URLS")
if not P2P_NODE_URLS_STR:
    raise ValueError("P2P_NODE_URLS environment variable is not set for the metadata service!")
P2P_NODE_URLS = P2P_NODE_URLS_STR.split(',')

def get_random_p2p_node():
    """Selects a random P2P node URL from the available list."""
    return random.choice(P2P_NODE_URLS)

# --- Helper Functions (Unchanged) ---
def hash_data(data: bytes) -> str:
    return hashlib.sha256(data).hexdigest()

def derive_key_from_password(password: str, salt: bytes) -> bytes:
    return hashlib.pbkdf2_hmac('sha512', password.encode(), salt, 100000, dklen=32)

def encrypt_symmetric(data: bytes, key: bytes) -> dict:
    box = SecretBox(key)
    nonce = nacl_random(SecretBox.NONCE_SIZE)
    ciphertext = box.encrypt(data, nonce)
    return {"ciphertext": ciphertext, "nonce": nonce}

def decrypt_symmetric(ciphertext: bytes, nonce: bytes, key: bytes) -> Optional[bytes]:
    try:
        return SecretBox(key).decrypt(ciphertext, nonce)
    except Exception:
        return None

def encrypt_asymmetric(message: bytes, recipient_pk: PublicKey) -> bytes:
    ephemeral_sk = PrivateKey.generate()
    box = Box(ephemeral_sk, recipient_pk)
    nonce = nacl_random(Box.NONCE_SIZE)
    encrypted_message = box.encrypt(message, nonce)
    return ephemeral_sk.public_key.__bytes__() + nonce + encrypted_message

def decrypt_asymmetric(full_message: bytes, user_sk: PrivateKey) -> Optional[bytes]:
    try:
        pk_size = PublicKey.SIZE
        nonce_size = Box.NONCE_SIZE
        sender_pk = PublicKey(full_message[:pk_size])
        nonce = full_message[pk_size : pk_size + nonce_size]
        ciphertext = full_message[pk_size + nonce_size:]
        box = Box(user_sk, sender_pk)
        return box.decrypt(ciphertext, nonce)
    except Exception:
        return None

# --- The Main Re-sharding Function ---
async def re_shard_file(file_doc: dict, owner_doc: dict, new_n: int, new_k: int, owner_password: str):
    async with httpx.AsyncClient(timeout=60.0) as client:
        print("--- Starting Re-shard Process ---")
        
        # --- PART 1: DECONSTRUCT ---
        print("1. Decrypting owner's private key...")
        salt = bytes(16 * [1])
        password_key = derive_key_from_password(owner_password, salt)
        nonce_b64, encrypted_sk_b64 = owner_doc["encrypted_private_key"].split(':')
        owner_sk_bytes = decrypt_symmetric(base64.b64decode(encrypted_sk_b64), base64.b64decode(nonce_b64), password_key)
        if not owner_sk_bytes:
            raise Exception("Failed to decrypt owner's private key.")
        owner_sk = PrivateKey(owner_sk_bytes)
        print("✅ Owner's private key decrypted.")

        print("2. Decrypting file key...")
        encrypted_file_key = base64.b64decode(file_doc["encrypted_file_key"])
        file_key = decrypt_asymmetric(encrypted_file_key, owner_sk)
        if not file_key:
            raise Exception("Failed to decrypt file key.")
        print("✅ File key decrypted.")

        print(f"3. Fetching manifest...")
        manifest_res = await client.get(f"{get_random_p2p_node()}/p2p/get/{file_doc['root_hash']}")
        manifest_res.raise_for_status()
        manifest_data = json.loads(base64.b64decode(manifest_res.json()["value"]))
        print("✅ Manifest fetched.")
        
        old_k = manifest_data["erasure"]["k"]
        print(f"4. Fetching old shares (need at least {old_k})...")
        
        async def fetch_share(share_hash: str):
            try:
                res = await client.get(f"{get_random_p2p_node()}/p2p/get/{share_hash}", timeout=15)
                if res.status_code == 200:
                    return base64.b64decode(res.json()["value"])
            except Exception:
                return None

        fetch_tasks = [fetch_share(h) for h in manifest_data["shards"]]
        results = await asyncio.gather(*fetch_tasks)
        
        retrieved_shares = [s for s in results if s is not None]
        if len(retrieved_shares) < old_k:
            raise Exception(f"Could not retrieve enough old shares. Needed {old_k}, got {len(retrieved_shares)}")
        print(f"✅ Retrieved {len(retrieved_shares)} shares.")

        print("5. Reconstructing original file content...")
        # --- START OF MODIFICATION ---
        # The `share` class constructor needs `x` and `y` as separate arguments.
        # We must parse the raw share bytes to extract these values.
        shares_for_interpolation = []
        for share_bytes in retrieved_shares[:old_k]:
            # The share format is a 1-byte index (x) followed by the y-value bytes.
            x = int.from_bytes(share_bytes[:1], 'big')
            y = int.from_bytes(share_bytes[1:], 'big')
            shares_for_interpolation.append(share(x, y)) # Pass x and y to the constructor
        
        secret_int = shamirs.interpolate(shares_for_interpolation)
        original_len = manifest_data["crypto"]["ciphertextLength"]
        ciphertext = secret_int.to_bytes(original_len, 'big')
        # --- END OF MODIFICATION ---
        
        print("6. Decrypting the reconstructed ciphertext...")
        nonce = base64.b64decode(manifest_data["crypto"]["nonce"])
        plaintext = decrypt_symmetric(ciphertext, nonce, file_key)
        if not plaintext:
            raise Exception("Decryption failed. Ciphertext failed verification, data may be corrupt.")
        print("✅ Plaintext recovered.")

        # --- PART 2: RECONSTRUCT ---
        print("\n--- Starting RECONSTRUCTION Phase ---")

        print("7. Generating new file key and re-encrypting...")
        new_file_key = nacl_random(SecretBox.KEY_SIZE)
        new_encrypted_payload = encrypt_symmetric(plaintext, new_file_key)
        new_ciphertext = new_encrypted_payload["ciphertext"]
        new_nonce = new_encrypted_payload["nonce"]
        print("✅ File re-encrypted.")

        print(f"8. Creating new shares (n={new_n}, k={new_k})...")
        # --- START OF MODIFICATION ---
        # The `split` function takes the secret as a large integer.
        secret_int_to_split = int.from_bytes(new_ciphertext, 'big')
        # It returns a list of `share` objects.
        new_share_objects = shamirs.split(secret_int_to_split, new_k, new_n)
        # We must convert these objects back to their byte representation for storage.
        new_shares = [bytes(s) for s in new_share_objects]
        # --- END OF MODIFICATION ---
        
        print("9. Uploading new shares...")
        new_share_hashes = [hash_data(share) for share in new_shares]
        upload_tasks = [
            client.post(f"{get_random_p2p_node()}/p2p/store", json={"key": h, "value": base64.b64encode(s).decode()})
            for h, s in zip(new_share_hashes, new_shares)
        ]
        await asyncio.gather(*upload_tasks)
        print("✅ New shares uploaded.")

        print("10. Creating and uploading new manifest...")
        new_manifest = {
            "name": file_doc["filename"], "type": manifest_data["type"],
            "erasure": {"n": new_n, "k": new_k},
            "shards": new_share_hashes,
            "crypto": {
                "nonce": base64.b64encode(new_nonce).decode(),
                "ciphertextLength": len(new_ciphertext)
            }
        }
        new_manifest_data = json.dumps(new_manifest).encode()
        new_root_hash = hash_data(new_manifest_data)
        await client.post(f"{get_random_p2p_node()}/p2p/store", json={"key": new_root_hash, "value": base64.b64encode(new_manifest_data).decode()})
        print("✅ New manifest uploaded.")

        print("11. Re-encrypting new file key for owner...")
        owner_pk = PublicKey(base64.b64decode(owner_doc["public_key"]))
        new_encrypted_file_key_for_owner = encrypt_asymmetric(new_file_key, owner_pk)
        
        print("--- Re-shard Process Complete ---")
        return new_root_hash, base64.b64encode(new_encrypted_file_key_for_owner).decode()
```

`v2/p2p_network/Dockerfile`

```
FROM python:3.10-slim

WORKDIR /app

# --- START OF MODIFICATION ---
# Install curl, which is required for the healthcheck in docker-compose.yml
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
# --- END OF MODIFICATION ---

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "p2p_node:app", "--host", "0.0.0.0", "--port", "8001"]
```

`v2/p2p_network/p2p_node.py`

```python
import asyncio
import os
import uvicorn
import base64
import threading
import httpx
import json
import aiofiles
from contextlib import asynccontextmanager
from typing import List

from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware

from kademlia.network import Server

# --- Configuration (Unchanged) ---
NODE_PORT = int(os.getenv("NODE_PORT", 8468))
API_PORT = int(os.getenv("API_PORT", 8001))
BOOTSTRAP_IP = os.getenv("BOOTSTRAP_IP", None)
BOOTSTRAP_PORT = int(os.getenv("BOOTSTRAP_PORT", 8468))
OWN_PUBLIC_URL = os.getenv("OWN_PUBLIC_URL")
OWN_INTERNAL_URL = os.getenv("OWN_INTERNAL_URL")
STORAGE_PATH = "/storage"

app_state = {}

def run_kademlia_loop(loop, server, bootstrap_node):
    asyncio.set_event_loop(loop)
    async def start_and_bootstrap():
        await server.listen(NODE_PORT)
        print(f"Kademlia node running in background thread with ID: {server.node.id.hex()}")
        if bootstrap_node:
            print(f"Attempting to bootstrap to {bootstrap_node}...")
            # --- START OF MODIFICATION 1 ---
            # Give the network a moment to settle before bootstrapping
            await asyncio.sleep(5) 
            # --- END OF MODIFICATION 1 ---
            neighbors = await server.bootstrap([bootstrap_node])
            if neighbors:
                print(f"Bootstrap successful. Found {len(neighbors)} neighbors.")
            else:
                print("Bootstrap failed to find neighbors.")
    loop.run_until_complete(start_and_bootstrap())
    loop.run_forever()

@asynccontextmanager
async def lifespan(app: FastAPI):
    os.makedirs(STORAGE_PATH, exist_ok=True)
    
    print("Starting Kademlia node in a background thread...")
    kademlia_loop = asyncio.new_event_loop()
    kademlia_server = Server()
    bootstrap_node = (BOOTSTRAP_IP, BOOTSTRAP_PORT) if BOOTSTRAP_IP else None
    kademlia_thread = threading.Thread(target=run_kademlia_loop, args=(kademlia_loop, kademlia_server, bootstrap_node), daemon=True)
    kademlia_thread.start()
    
    # --- START OF MODIFICATION 2 ---
    # Increase sleep time to allow the Kademlia thread to fully initialize and bootstrap
    await asyncio.sleep(10) 
    # --- END OF MODIFICATION 2 ---
    
    async def re_announce_data():
        print("Scanning local storage to re-announce data...")
        try:
            stored_files = os.listdir(STORAGE_PATH)
            if not stored_files:
                print("No existing data to re-announce.")
                return

            provider_info = { "public_url": OWN_PUBLIC_URL, "internal_url": OWN_INTERNAL_URL }
            provider_info_str = json.dumps(provider_info)
            
            for filename in stored_files:
                key = filename
                future = asyncio.run_coroutine_threadsafe(kademlia_server.set(key, provider_info_str), kademlia_loop)
                try:
                    future.result(timeout=10)
                except Exception as e:
                    print(f"    - Failed to re-announce key '{key[:10]}...': {e}")
            print("Re-announcement scan complete.")
        except Exception as e:
            print(f"Error during re-announcement: {e}")

    asyncio.create_task(re_announce_data())
    
    app_state["kademlia_server"] = kademlia_server
    app_state["kademlia_loop"] = kademlia_loop
    app_state["http_client"] = httpx.AsyncClient(timeout=10.0)
    print("P2P Node API is ready.")
    yield
    print("Shutting down...")
    await app_state["http_client"].aclose()
    kademlia_loop.call_soon_threadsafe(kademlia_loop.stop)
    print("Shutdown complete.")

# ... (rest of the file is unchanged) ...
app = FastAPI(lifespan=lifespan)
app.add_middleware(
    CORSMiddleware,
    allow_origin_regex=r"http://localhost:\d+",
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Health Check and Debug Endpoints ---
@app.get("/health")
async def health_check():
    server = app_state.get("kademlia_server")
    if not server or not server.node:
        raise HTTPException(status_code=503, detail="Kademlia server is not running.")
    
    try:
        stored_shards_count = len(os.listdir(STORAGE_PATH))
    except Exception:
        stored_shards_count = -1
    
    return {
        "status": "ok",
        "kademlia_id": server.node.id.hex(),
        "known_peers": len(server.protocol.router.find_neighbors(server.node)),
        "stored_shards_count": stored_shards_count,
        "public_url": OWN_PUBLIC_URL
    }

# --- CORRECTED: Garbage Collection Endpoint ---
@app.post("/gc")
async def trigger_garbage_collection(active_hashes: List[str] = Body(...)):
    print("--- Starting Garbage Collection ---")
    # --- FIX: Use the global STORAGE_PATH constant directly ---
    storage_path = STORAGE_PATH
    
    try:
        locally_stored_files = set(os.listdir(storage_path))
        active_hashes_set = set(active_hashes)
        
        garbage_files = locally_stored_files - active_hashes_set
        
        if not garbage_files:
            print("No garbage found. Storage is clean.")
            return {"status": "no_garbage_found", "deleted_count": 0}

        print(f"Found {len(garbage_files)} garbage files to delete.")
        deleted_count = 0
        for filename in garbage_files:
            try:
                os.remove(os.path.join(storage_path, filename))
                deleted_count += 1
            except Exception as e:
                print(f"Could not delete file {filename}: {e}")
        
        print(f"--- Garbage Collection Complete. Deleted {deleted_count} files. ---")
        return {"status": "gc_complete", "deleted_count": deleted_count}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred during GC: {e}")

# --- (All other endpoints remain the same) ---
@app.get("/debug/list_keys")
async def list_keys():
    try:
        return {"locally_stored_keys": os.listdir(STORAGE_PATH)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Could not read storage directory: {e}")

@app.post("/internal/store_share")
async def internal_store_share(data: dict = Body(...)):
    key = data.get("key")
    value = data.get("value")
    file_path = os.path.join(STORAGE_PATH, key)
    try:
        async with aiofiles.open(file_path, 'w') as f:
            await f.write(value)
        print(f"Locally stored share to file for key '{key[:10]}...'.")
        return {"status": "stored_locally"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to write share to disk: {e}")

@app.get("/internal/get_share/{key}")
async def internal_get_share(key: str):
    file_path = os.path.join(STORAGE_PATH, key)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="Share not found on this node's disk.")
    try:
        async with aiofiles.open(file_path, 'r') as f:
            value = await f.read()
        return {"key": key, "value": value}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to read share from disk: {e}")

@app.post("/p2p/store")
async def store_data(data: dict = Body(...)):
    server = app_state.get("kademlia_server")
    loop = app_state.get("kademlia_loop")
    if not server or not loop: raise HTTPException(status_code=503, detail="Kademlia server not initialized")
    
    key = data.get("key")
    value = data.get("value")
    if not key or value is None:
        raise HTTPException(status_code=400, detail="Key and value are required.")

    try:
        await internal_store_share({"key": key, "value": value})
        
        provider_info = { "public_url": OWN_PUBLIC_URL, "internal_url": OWN_INTERNAL_URL }
        provider_info_str = json.dumps(provider_info)
        
        print(f"Announcing provider for key '{key[:10]}...' to the DHT.")
        future_set = asyncio.run_coroutine_threadsafe(server.set(key, provider_info_str), loop)
        future_set.result(timeout=15)
        print(f"Successfully announced provider for key '{key[:10]}...'.")

        print(f"Verifying storage for key '{key[:10]}...' on the DHT...")
        future_get = asyncio.run_coroutine_threadsafe(server.get(key), loop)
        verification_result = future_get.result(timeout=15)
        
        if verification_result is None:
            raise Exception("Verification failed; data could not be found on DHT after setting.")
        
        print(f"✅ Verification successful for key '{key[:10]}...'.")
        
        return {"status": "announced_and_verified", "provider": OWN_PUBLIC_URL}
    except Exception as e:
        print(f"ERROR during store: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to store or announce data: {e}")

@app.get("/p2p/get/{key}")
async def get_data(key: str):
    file_path = os.path.join(STORAGE_PATH, key)
    if os.path.exists(file_path):
        print(f"Found key '{key[:10]}...' in local file storage.")
        return await internal_get_share(key)

    server = app_state.get("kademlia_server")
    loop = app_state.get("kademlia_loop")
    client = app_state.get("http_client")
    if not server or not loop or not client: raise HTTPException(status_code=503, detail="Server not fully initialized")
    
    try:
        print(f"Key '{key[:10]}...' not found locally. Searching DHT for a provider...")
        future = asyncio.run_coroutine_threadsafe(server.get(key), loop)
        provider_info_str = future.result(timeout=15)
        
        if provider_info_str is None:
            raise HTTPException(status_code=404, detail="Provider for data not found on the DHT.")
        
        provider_info = json.loads(provider_info_str)
        provider_internal_url = provider_info.get("internal_url")
        
        print(f"Found provider for key '{key[:10]}...' at internal URL {provider_internal_url}.")
        
        if not provider_internal_url:
            raise HTTPException(status_code=500, detail="Provider info is malformed.")

        print(f"Contacting provider node at internal URL {provider_internal_url} to get data...")
        response = await client.get(f"{provider_internal_url}/internal/get_share/{key}")
        response.raise_for_status()
        return response.json()

    except Exception as e:
        print(f"ERROR during get: {e}")
        if isinstance(e, (asyncio.TimeoutError, httpx.TimeoutException)):
             raise HTTPException(status_code=404, detail=f"Data not found on the network (DHT/HTTP timeout).")
        raise HTTPException(status_code=500, detail=f"Failed to get data: {e}")

if __name__ == "__main__":
    uvicorn.run("p2p_node:app", host="0.0.0.0", port=API_PORT, log_level="info")
```

`v2/p2p_network/requirements.txt`

```
fastapi
uvicorn
python-multipart
kademlia
requests
httpx
aiofiles
```

